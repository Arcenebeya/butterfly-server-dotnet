### YamlMime:ManagedReference
items:
- uid: Butterfly.Core.Database.SelectStatement
  commentId: T:Butterfly.Core.Database.SelectStatement
  id: SelectStatement
  parent: Butterfly.Core.Database
  children:
  - Butterfly.Core.Database.SelectStatement.#ctor(Butterfly.Core.Database.IDatabase,System.String,System.Int32)
  - Butterfly.Core.Database.SelectStatement.#ctor(Butterfly.Core.Database.IDatabase,System.String,System.String,System.String,System.String,System.Int32)
  - Butterfly.Core.Database.SelectStatement.#ctor(Butterfly.Core.Database.SelectStatement,System.String,System.Boolean)
  - Butterfly.Core.Database.SelectStatement.Compile(Butterfly.Core.Database.IDatabase)
  - Butterfly.Core.Database.SelectStatement.fromClause
  - Butterfly.Core.Database.SelectStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary{System.String,System.Object})
  - Butterfly.Core.Database.SelectStatement.limit
  - Butterfly.Core.Database.SelectStatement.orderByClause
  - Butterfly.Core.Database.SelectStatement.ReplaceAll(System.String,Regex,Func{Match,System.String})
  - Butterfly.Core.Database.SelectStatement.selectClause
  - Butterfly.Core.Database.SelectStatement.STATEMENT_REGEX
  - Butterfly.Core.Database.SelectStatement.whereClause
  langs:
  - csharp
  - vb
  name: SelectStatement
  nameWithType: SelectStatement
  fullName: Butterfly.Core.Database.SelectStatement
  type: Class
  source:
    remote:
      path: Butterfly.Core/Database/Statements/SelectStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: SelectStatement
    path: ../Butterfly.Core/Database/Statements/SelectStatement.cs
    startLine: 18
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nInternal class used to parse SELECT statements\n"
  example: []
  syntax:
    content: 'public class SelectStatement : BaseStatement'
    content.vb: >-
      Public Class SelectStatement

          Inherits BaseStatement
  inheritance:
  - System.Object
  - Butterfly.Core.Database.BaseStatement
  inheritedMembers:
  - Butterfly.Core.Database.BaseStatement.IsSqlTableName
  - Butterfly.Core.Database.BaseStatement.Sql
  - Butterfly.Core.Database.BaseStatement.StatementFromRefs
  - Butterfly.Core.Database.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  - Butterfly.Core.Database.BaseStatement.fromTableNames
  - Butterfly.Core.Database.BaseStatement.HasTableInFrom(System.String)
  - Butterfly.Core.Database.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - Butterfly.Core.Database.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
  - Butterfly.Core.Database.BaseStatement.EQUALS_REF_REGEX
  - Butterfly.Core.Database.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Core.Database.StatementEqualsRef[])
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Butterfly.Core.Database.SelectStatement.STATEMENT_REGEX
  commentId: F:Butterfly.Core.Database.SelectStatement.STATEMENT_REGEX
  id: STATEMENT_REGEX
  parent: Butterfly.Core.Database.SelectStatement
  langs:
  - csharp
  - vb
  name: STATEMENT_REGEX
  nameWithType: SelectStatement.STATEMENT_REGEX
  fullName: Butterfly.Core.Database.SelectStatement.STATEMENT_REGEX
  type: Field
  source:
    remote:
      path: Butterfly.Core/Database/Statements/SelectStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: STATEMENT_REGEX
    path: ../Butterfly.Core/Database/Statements/SelectStatement.cs
    startLine: 19
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: protected static readonly Regex STATEMENT_REGEX
    return:
      type: Regex
    content.vb: Protected Shared ReadOnly STATEMENT_REGEX As Regex
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: Butterfly.Core.Database.SelectStatement.selectClause
  commentId: F:Butterfly.Core.Database.SelectStatement.selectClause
  id: selectClause
  parent: Butterfly.Core.Database.SelectStatement
  langs:
  - csharp
  - vb
  name: selectClause
  nameWithType: SelectStatement.selectClause
  fullName: Butterfly.Core.Database.SelectStatement.selectClause
  type: Field
  source:
    remote:
      path: Butterfly.Core/Database/Statements/SelectStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: selectClause
    path: ../Butterfly.Core/Database/Statements/SelectStatement.cs
    startLine: 21
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: public readonly string selectClause
    return:
      type: System.String
    content.vb: Public ReadOnly selectClause As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Butterfly.Core.Database.SelectStatement.fromClause
  commentId: F:Butterfly.Core.Database.SelectStatement.fromClause
  id: fromClause
  parent: Butterfly.Core.Database.SelectStatement
  langs:
  - csharp
  - vb
  name: fromClause
  nameWithType: SelectStatement.fromClause
  fullName: Butterfly.Core.Database.SelectStatement.fromClause
  type: Field
  source:
    remote:
      path: Butterfly.Core/Database/Statements/SelectStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: fromClause
    path: ../Butterfly.Core/Database/Statements/SelectStatement.cs
    startLine: 22
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: public readonly string fromClause
    return:
      type: System.String
    content.vb: Public ReadOnly fromClause As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Butterfly.Core.Database.SelectStatement.whereClause
  commentId: F:Butterfly.Core.Database.SelectStatement.whereClause
  id: whereClause
  parent: Butterfly.Core.Database.SelectStatement
  langs:
  - csharp
  - vb
  name: whereClause
  nameWithType: SelectStatement.whereClause
  fullName: Butterfly.Core.Database.SelectStatement.whereClause
  type: Field
  source:
    remote:
      path: Butterfly.Core/Database/Statements/SelectStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: whereClause
    path: ../Butterfly.Core/Database/Statements/SelectStatement.cs
    startLine: 23
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: public readonly string whereClause
    return:
      type: System.String
    content.vb: Public ReadOnly whereClause As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Butterfly.Core.Database.SelectStatement.orderByClause
  commentId: F:Butterfly.Core.Database.SelectStatement.orderByClause
  id: orderByClause
  parent: Butterfly.Core.Database.SelectStatement
  langs:
  - csharp
  - vb
  name: orderByClause
  nameWithType: SelectStatement.orderByClause
  fullName: Butterfly.Core.Database.SelectStatement.orderByClause
  type: Field
  source:
    remote:
      path: Butterfly.Core/Database/Statements/SelectStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: orderByClause
    path: ../Butterfly.Core/Database/Statements/SelectStatement.cs
    startLine: 24
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: public readonly string orderByClause
    return:
      type: System.String
    content.vb: Public ReadOnly orderByClause As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Butterfly.Core.Database.SelectStatement.limit
  commentId: F:Butterfly.Core.Database.SelectStatement.limit
  id: limit
  parent: Butterfly.Core.Database.SelectStatement
  langs:
  - csharp
  - vb
  name: limit
  nameWithType: SelectStatement.limit
  fullName: Butterfly.Core.Database.SelectStatement.limit
  type: Field
  source:
    remote:
      path: Butterfly.Core/Database/Statements/SelectStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: limit
    path: ../Butterfly.Core/Database/Statements/SelectStatement.cs
    startLine: 25
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: public readonly int limit
    return:
      type: System.Int32
    content.vb: Public ReadOnly limit As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Butterfly.Core.Database.SelectStatement.#ctor(Butterfly.Core.Database.IDatabase,System.String,System.Int32)
  commentId: M:Butterfly.Core.Database.SelectStatement.#ctor(Butterfly.Core.Database.IDatabase,System.String,System.Int32)
  id: '#ctor(Butterfly.Core.Database.IDatabase,System.String,System.Int32)'
  parent: Butterfly.Core.Database.SelectStatement
  langs:
  - csharp
  - vb
  name: SelectStatement(IDatabase, String, Int32)
  nameWithType: SelectStatement.SelectStatement(IDatabase, String, Int32)
  fullName: Butterfly.Core.Database.SelectStatement.SelectStatement(Butterfly.Core.Database.IDatabase, System.String, System.Int32)
  type: Constructor
  source:
    remote:
      path: Butterfly.Core/Database/Statements/SelectStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: .ctor
    path: ../Butterfly.Core/Database/Statements/SelectStatement.cs
    startLine: 27
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: public SelectStatement(IDatabase database, string sql, int limit = null)
    parameters:
    - id: database
      type: Butterfly.Core.Database.IDatabase
    - id: sql
      type: System.String
    - id: limit
      type: System.Int32
    content.vb: Public Sub New(database As IDatabase, sql As String, limit As Integer = Nothing)
  overload: Butterfly.Core.Database.SelectStatement.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Butterfly.Core.Database.SelectStatement.#ctor(Butterfly.Core.Database.IDatabase,System.String,System.String,System.String,System.String,System.Int32)
  commentId: M:Butterfly.Core.Database.SelectStatement.#ctor(Butterfly.Core.Database.IDatabase,System.String,System.String,System.String,System.String,System.Int32)
  id: '#ctor(Butterfly.Core.Database.IDatabase,System.String,System.String,System.String,System.String,System.Int32)'
  parent: Butterfly.Core.Database.SelectStatement
  langs:
  - csharp
  - vb
  name: SelectStatement(IDatabase, String, String, String, String, Int32)
  nameWithType: SelectStatement.SelectStatement(IDatabase, String, String, String, String, Int32)
  fullName: Butterfly.Core.Database.SelectStatement.SelectStatement(Butterfly.Core.Database.IDatabase, System.String, System.String, System.String, System.String, System.Int32)
  type: Constructor
  source:
    remote:
      path: Butterfly.Core/Database/Statements/SelectStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: .ctor
    path: ../Butterfly.Core/Database/Statements/SelectStatement.cs
    startLine: 52
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: public SelectStatement(IDatabase database, string selectClause, string fromClause, string whereClause, string orderByClause, int limit = null)
    parameters:
    - id: database
      type: Butterfly.Core.Database.IDatabase
    - id: selectClause
      type: System.String
    - id: fromClause
      type: System.String
    - id: whereClause
      type: System.String
    - id: orderByClause
      type: System.String
    - id: limit
      type: System.Int32
    content.vb: Public Sub New(database As IDatabase, selectClause As String, fromClause As String, whereClause As String, orderByClause As String, limit As Integer = Nothing)
  overload: Butterfly.Core.Database.SelectStatement.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Butterfly.Core.Database.SelectStatement.Compile(Butterfly.Core.Database.IDatabase)
  commentId: M:Butterfly.Core.Database.SelectStatement.Compile(Butterfly.Core.Database.IDatabase)
  id: Compile(Butterfly.Core.Database.IDatabase)
  parent: Butterfly.Core.Database.SelectStatement
  langs:
  - csharp
  - vb
  name: Compile(IDatabase)
  nameWithType: SelectStatement.Compile(IDatabase)
  fullName: Butterfly.Core.Database.SelectStatement.Compile(Butterfly.Core.Database.IDatabase)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/Statements/SelectStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: Compile
    path: ../Butterfly.Core/Database/Statements/SelectStatement.cs
    startLine: 62
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: protected void Compile(IDatabase database)
    parameters:
    - id: database
      type: Butterfly.Core.Database.IDatabase
    content.vb: Protected Sub Compile(database As IDatabase)
  overload: Butterfly.Core.Database.SelectStatement.Compile*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Butterfly.Core.Database.SelectStatement.#ctor(Butterfly.Core.Database.SelectStatement,System.String,System.Boolean)
  commentId: M:Butterfly.Core.Database.SelectStatement.#ctor(Butterfly.Core.Database.SelectStatement,System.String,System.Boolean)
  id: '#ctor(Butterfly.Core.Database.SelectStatement,System.String,System.Boolean)'
  parent: Butterfly.Core.Database.SelectStatement
  langs:
  - csharp
  - vb
  name: SelectStatement(SelectStatement, String, Boolean)
  nameWithType: SelectStatement.SelectStatement(SelectStatement, String, Boolean)
  fullName: Butterfly.Core.Database.SelectStatement.SelectStatement(Butterfly.Core.Database.SelectStatement, System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: Butterfly.Core/Database/Statements/SelectStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: .ctor
    path: ../Butterfly.Core/Database/Statements/SelectStatement.cs
    startLine: 66
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: public SelectStatement(SelectStatement sourceSelectStatement, string overrideWhereClause, bool ignoreOrderBy)
    parameters:
    - id: sourceSelectStatement
      type: Butterfly.Core.Database.SelectStatement
    - id: overrideWhereClause
      type: System.String
    - id: ignoreOrderBy
      type: System.Boolean
    content.vb: Public Sub New(sourceSelectStatement As SelectStatement, overrideWhereClause As String, ignoreOrderBy As Boolean)
  overload: Butterfly.Core.Database.SelectStatement.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Butterfly.Core.Database.SelectStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:Butterfly.Core.Database.SelectStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary{System.String,System.Object})
  id: GetExecutableSqlAndParams(System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: Butterfly.Core.Database.SelectStatement
  langs:
  - csharp
  - vb
  name: GetExecutableSqlAndParams(System.Collections.Generic.Dictionary<String, Object>)
  nameWithType: SelectStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary<String, Object>)
  fullName: Butterfly.Core.Database.SelectStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/Statements/SelectStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: GetExecutableSqlAndParams
    path: ../Butterfly.Core/Database/Statements/SelectStatement.cs
    startLine: 82
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: public GetExecutableSqlAndParams(System.Collections.Generic.Dictionary<string, object> sourceParams)
    parameters:
    - id: sourceParams
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    return:
      type: System.ValueTuple{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}}
    content.vb: 'Public Function GetExecutableSqlAndParams(sourceParams As System.Collections.Generic.Dictionary(Of String, Object)) As '
  overload: Butterfly.Core.Database.SelectStatement.GetExecutableSqlAndParams*
  nameWithType.vb: SelectStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Butterfly.Core.Database.SelectStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: GetExecutableSqlAndParams(System.Collections.Generic.Dictionary(Of String, Object))
- uid: Butterfly.Core.Database.SelectStatement.ReplaceAll(System.String,Regex,Func{Match,System.String})
  commentId: M:Butterfly.Core.Database.SelectStatement.ReplaceAll(System.String,Regex,Func{Match,System.String})
  id: ReplaceAll(System.String,Regex,Func{Match,System.String})
  parent: Butterfly.Core.Database.SelectStatement
  langs:
  - csharp
  - vb
  name: ReplaceAll(String, Regex, Func<Match, String>)
  nameWithType: SelectStatement.ReplaceAll(String, Regex, Func<Match, String>)
  fullName: Butterfly.Core.Database.SelectStatement.ReplaceAll(System.String, Regex, Func<Match, System.String>)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/Statements/SelectStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: ReplaceAll
    path: ../Butterfly.Core/Database/Statements/SelectStatement.cs
    startLine: 159
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: protected static string ReplaceAll(string sql, Regex regex, Func<Match, string> getReplacement)
    parameters:
    - id: sql
      type: System.String
    - id: regex
      type: Regex
    - id: getReplacement
      type: Func{Match,System.String}
    return:
      type: System.String
    content.vb: Protected Shared Function ReplaceAll(sql As String, regex As Regex, getReplacement As Func(Of Match, String)) As String
  overload: Butterfly.Core.Database.SelectStatement.ReplaceAll*
  nameWithType.vb: SelectStatement.ReplaceAll(String, Regex, Func(Of Match, String))
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
  fullName.vb: Butterfly.Core.Database.SelectStatement.ReplaceAll(System.String, Regex, Func(Of Match, System.String))
  name.vb: ReplaceAll(String, Regex, Func(Of Match, String))
references:
- uid: Butterfly.Core.Database
  commentId: N:Butterfly.Core.Database
  name: Butterfly.Core.Database
  nameWithType: Butterfly.Core.Database
  fullName: Butterfly.Core.Database
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Butterfly.Core.Database.BaseStatement
  commentId: T:Butterfly.Core.Database.BaseStatement
  parent: Butterfly.Core.Database
  name: BaseStatement
  nameWithType: BaseStatement
  fullName: Butterfly.Core.Database.BaseStatement
- uid: Butterfly.Core.Database.BaseStatement.IsSqlTableName
  commentId: P:Butterfly.Core.Database.BaseStatement.IsSqlTableName
  parent: Butterfly.Core.Database.BaseStatement
  name: IsSqlTableName
  nameWithType: BaseStatement.IsSqlTableName
  fullName: Butterfly.Core.Database.BaseStatement.IsSqlTableName
- uid: Butterfly.Core.Database.BaseStatement.Sql
  commentId: P:Butterfly.Core.Database.BaseStatement.Sql
  parent: Butterfly.Core.Database.BaseStatement
  name: Sql
  nameWithType: BaseStatement.Sql
  fullName: Butterfly.Core.Database.BaseStatement.Sql
- uid: Butterfly.Core.Database.BaseStatement.StatementFromRefs
  commentId: P:Butterfly.Core.Database.BaseStatement.StatementFromRefs
  parent: Butterfly.Core.Database.BaseStatement
  name: StatementFromRefs
  nameWithType: BaseStatement.StatementFromRefs
  fullName: Butterfly.Core.Database.BaseStatement.StatementFromRefs
- uid: Butterfly.Core.Database.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  commentId: M:Butterfly.Core.Database.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  parent: Butterfly.Core.Database.BaseStatement
  isExternal: true
  name: FindStatementFromRefByTableAlias(String)
  nameWithType: BaseStatement.FindStatementFromRefByTableAlias(String)
  fullName: Butterfly.Core.Database.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  spec.csharp:
  - uid: Butterfly.Core.Database.BaseStatement.FindStatementFromRefByTableAlias(System.String)
    name: FindStatementFromRefByTableAlias
    nameWithType: BaseStatement.FindStatementFromRefByTableAlias
    fullName: Butterfly.Core.Database.BaseStatement.FindStatementFromRefByTableAlias
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Core.Database.BaseStatement.FindStatementFromRefByTableAlias(System.String)
    name: FindStatementFromRefByTableAlias
    nameWithType: BaseStatement.FindStatementFromRefByTableAlias
    fullName: Butterfly.Core.Database.BaseStatement.FindStatementFromRefByTableAlias
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Database.BaseStatement.fromTableNames
  commentId: F:Butterfly.Core.Database.BaseStatement.fromTableNames
  parent: Butterfly.Core.Database.BaseStatement
  name: fromTableNames
  nameWithType: BaseStatement.fromTableNames
  fullName: Butterfly.Core.Database.BaseStatement.fromTableNames
- uid: Butterfly.Core.Database.BaseStatement.HasTableInFrom(System.String)
  commentId: M:Butterfly.Core.Database.BaseStatement.HasTableInFrom(System.String)
  parent: Butterfly.Core.Database.BaseStatement
  isExternal: true
  name: HasTableInFrom(String)
  nameWithType: BaseStatement.HasTableInFrom(String)
  fullName: Butterfly.Core.Database.BaseStatement.HasTableInFrom(System.String)
  spec.csharp:
  - uid: Butterfly.Core.Database.BaseStatement.HasTableInFrom(System.String)
    name: HasTableInFrom
    nameWithType: BaseStatement.HasTableInFrom
    fullName: Butterfly.Core.Database.BaseStatement.HasTableInFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Core.Database.BaseStatement.HasTableInFrom(System.String)
    name: HasTableInFrom
    nameWithType: BaseStatement.HasTableInFrom
    fullName: Butterfly.Core.Database.BaseStatement.HasTableInFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Database.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:Butterfly.Core.Database.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: Butterfly.Core.Database.BaseStatement
  isExternal: true
  name: ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary<String, Object>)
  nameWithType: BaseStatement.ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary<String, Object>)
  fullName: Butterfly.Core.Database.BaseStatement.ConfirmAllParamsUsed(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  nameWithType.vb: BaseStatement.ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary(Of String, Object))
  fullName.vb: Butterfly.Core.Database.BaseStatement.ConfirmAllParamsUsed(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary(Of String, Object))
  spec.csharp:
  - uid: Butterfly.Core.Database.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
    name: ConfirmAllParamsUsed
    nameWithType: BaseStatement.ConfirmAllParamsUsed
    fullName: Butterfly.Core.Database.BaseStatement.ConfirmAllParamsUsed
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Core.Database.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
    name: ConfirmAllParamsUsed
    nameWithType: BaseStatement.ConfirmAllParamsUsed
    fullName: Butterfly.Core.Database.BaseStatement.ConfirmAllParamsUsed
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Database.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
  commentId: M:Butterfly.Core.Database.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
  parent: Butterfly.Core.Database.BaseStatement
  isExternal: true
  name: ConvertParamsToDict(Object, Boolean)
  nameWithType: BaseStatement.ConvertParamsToDict(Object, Boolean)
  fullName: Butterfly.Core.Database.BaseStatement.ConvertParamsToDict(System.Object, System.Boolean)
  nameWithType.vb: BaseStatement.ConvertParamsToDict(, Boolean)
  fullName.vb: Butterfly.Core.Database.BaseStatement.ConvertParamsToDict(, System.Boolean)
  name.vb: ConvertParamsToDict(, Boolean)
  spec.csharp:
  - uid: Butterfly.Core.Database.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
    name: ConvertParamsToDict
    nameWithType: BaseStatement.ConvertParamsToDict
    fullName: Butterfly.Core.Database.BaseStatement.ConvertParamsToDict
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Core.Database.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
    name: ConvertParamsToDict
    nameWithType: BaseStatement.ConvertParamsToDict
    fullName: Butterfly.Core.Database.BaseStatement.ConvertParamsToDict
  - name: (
    nameWithType: (
    fullName: (
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Database.BaseStatement.EQUALS_REF_REGEX
  commentId: F:Butterfly.Core.Database.BaseStatement.EQUALS_REF_REGEX
  parent: Butterfly.Core.Database.BaseStatement
  name: EQUALS_REF_REGEX
  nameWithType: BaseStatement.EQUALS_REF_REGEX
  fullName: Butterfly.Core.Database.BaseStatement.EQUALS_REF_REGEX
- uid: Butterfly.Core.Database.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Core.Database.StatementEqualsRef[])
  commentId: M:Butterfly.Core.Database.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Core.Database.StatementEqualsRef[])
  parent: Butterfly.Core.Database.BaseStatement
  isExternal: true
  name: RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary<String, Object>, StatementEqualsRef[])
  nameWithType: BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary<String, Object>, StatementEqualsRef[])
  fullName: Butterfly.Core.Database.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary<System.String, System.Object>, Butterfly.Core.Database.StatementEqualsRef[])
  nameWithType.vb: BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary(Of String, Object), StatementEqualsRef())
  fullName.vb: Butterfly.Core.Database.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary(Of System.String, System.Object), Butterfly.Core.Database.StatementEqualsRef())
  name.vb: RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary(Of String, Object), StatementEqualsRef())
  spec.csharp:
  - uid: Butterfly.Core.Database.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Core.Database.StatementEqualsRef[])
    name: RemapStatementParamsToFieldValues
    nameWithType: BaseStatement.RemapStatementParamsToFieldValues
    fullName: Butterfly.Core.Database.BaseStatement.RemapStatementParamsToFieldValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Butterfly.Core.Database.StatementEqualsRef
    name: StatementEqualsRef
    nameWithType: StatementEqualsRef
    fullName: Butterfly.Core.Database.StatementEqualsRef
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Core.Database.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Core.Database.StatementEqualsRef[])
    name: RemapStatementParamsToFieldValues
    nameWithType: BaseStatement.RemapStatementParamsToFieldValues
    fullName: Butterfly.Core.Database.BaseStatement.RemapStatementParamsToFieldValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Butterfly.Core.Database.StatementEqualsRef
    name: StatementEqualsRef
    nameWithType: StatementEqualsRef
    fullName: Butterfly.Core.Database.StatementEqualsRef
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Regex
  isExternal: true
  name: Regex
  nameWithType: Regex
  fullName: Regex
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Butterfly.Core.Database.SelectStatement.#ctor*
  commentId: Overload:Butterfly.Core.Database.SelectStatement.#ctor
  name: SelectStatement
  nameWithType: SelectStatement.SelectStatement
  fullName: Butterfly.Core.Database.SelectStatement.SelectStatement
- uid: Butterfly.Core.Database.IDatabase
  commentId: T:Butterfly.Core.Database.IDatabase
  parent: Butterfly.Core.Database
  name: IDatabase
  nameWithType: IDatabase
  fullName: Butterfly.Core.Database.IDatabase
- uid: Butterfly.Core.Database.SelectStatement.Compile*
  commentId: Overload:Butterfly.Core.Database.SelectStatement.Compile
  name: Compile
  nameWithType: SelectStatement.Compile
  fullName: Butterfly.Core.Database.SelectStatement.Compile
- uid: Butterfly.Core.Database.SelectStatement
  commentId: T:Butterfly.Core.Database.SelectStatement
  parent: Butterfly.Core.Database
  name: SelectStatement
  nameWithType: SelectStatement
  fullName: Butterfly.Core.Database.SelectStatement
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Butterfly.Core.Database.SelectStatement.GetExecutableSqlAndParams*
  commentId: Overload:Butterfly.Core.Database.SelectStatement.GetExecutableSqlAndParams
  name: GetExecutableSqlAndParams
  nameWithType: SelectStatement.GetExecutableSqlAndParams
  fullName: Butterfly.Core.Database.SelectStatement.GetExecutableSqlAndParams
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: '!:System.Collections.Generic.Dictionary{System.String,System.Object}'
  definition: System.Collections.Generic.Dictionary`2
  name: System.Collections.Generic.Dictionary<String, Object>
  nameWithType: System.Collections.Generic.Dictionary<String, Object>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
  nameWithType.vb: System.Collections.Generic.Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
  name.vb: System.Collections.Generic.Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}}
  commentId: T:System.ValueTuple{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}}
  parent: System
  name: ''
  nameWithType: ''
  fullName: System.
- uid: System.Collections.Generic.Dictionary`2
  isExternal: true
  name: System.Collections.Generic.Dictionary<, >
  nameWithType: System.Collections.Generic.Dictionary<, >
  fullName: System.Collections.Generic.Dictionary<, >
  nameWithType.vb: System.Collections.Generic.Dictionary(Of , )
  fullName.vb: System.Collections.Generic.Dictionary(Of , )
  name.vb: System.Collections.Generic.Dictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Butterfly.Core.Database.SelectStatement.ReplaceAll*
  commentId: Overload:Butterfly.Core.Database.SelectStatement.ReplaceAll
  name: ReplaceAll
  nameWithType: SelectStatement.ReplaceAll
  fullName: Butterfly.Core.Database.SelectStatement.ReplaceAll
- uid: Func{Match,System.String}
  commentId: '!:Func{Match,System.String}'
  definition: Func`2
  name: Func<Match, String>
  nameWithType: Func<Match, String>
  fullName: Func<Match, System.String>
  nameWithType.vb: Func(Of Match, String)
  fullName.vb: Func(Of Match, System.String)
  name.vb: Func(Of Match, String)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Match
    name: Match
    nameWithType: Match
    fullName: Match
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Match
    name: Match
    nameWithType: Match
    fullName: Match
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true

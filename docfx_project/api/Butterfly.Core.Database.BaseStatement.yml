### YamlMime:ManagedReference
items:
- uid: Butterfly.Core.Database.BaseStatement
  commentId: T:Butterfly.Core.Database.BaseStatement
  id: BaseStatement
  parent: Butterfly.Core.Database
  children:
  - Butterfly.Core.Database.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - Butterfly.Core.Database.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
  - Butterfly.Core.Database.BaseStatement.EQUALS_REF_REGEX
  - Butterfly.Core.Database.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  - Butterfly.Core.Database.BaseStatement.fromTableNames
  - Butterfly.Core.Database.BaseStatement.HasTableInFrom(System.String)
  - Butterfly.Core.Database.BaseStatement.IsSqlTableName
  - Butterfly.Core.Database.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Core.Database.StatementEqualsRef[])
  - Butterfly.Core.Database.BaseStatement.Sql
  - Butterfly.Core.Database.BaseStatement.StatementFromRefs
  langs:
  - csharp
  - vb
  name: BaseStatement
  nameWithType: BaseStatement
  fullName: Butterfly.Core.Database.BaseStatement
  type: Class
  source:
    remote:
      path: Butterfly.Core/Database/Statements/BaseStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: BaseStatement
    path: ../Butterfly.Core/Database/Statements/BaseStatement.cs
    startLine: 16
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nBase class for parsing SQL statements\n"
  example: []
  syntax:
    content: 'public abstract class BaseStatement : object'
    content.vb: >-
      Public MustInherit Class BaseStatement

          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - Butterfly.Core.Database.CreateStatement
  - Butterfly.Core.Database.DeleteStatement
  - Butterfly.Core.Database.InsertStatement
  - Butterfly.Core.Database.SelectStatement
  - Butterfly.Core.Database.UpdateStatement
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Butterfly.Core.Database.BaseStatement.IsSqlTableName
  commentId: P:Butterfly.Core.Database.BaseStatement.IsSqlTableName
  id: IsSqlTableName
  parent: Butterfly.Core.Database.BaseStatement
  langs:
  - csharp
  - vb
  name: IsSqlTableName
  nameWithType: BaseStatement.IsSqlTableName
  fullName: Butterfly.Core.Database.BaseStatement.IsSqlTableName
  type: Property
  source:
    remote:
      path: Butterfly.Core/Database/Statements/BaseStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: IsSqlTableName
    path: ../Butterfly.Core/Database/Statements/BaseStatement.cs
    startLine: 17
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: protected bool IsSqlTableName { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected ReadOnly Property IsSqlTableName As Boolean
  overload: Butterfly.Core.Database.BaseStatement.IsSqlTableName*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Butterfly.Core.Database.BaseStatement.Sql
  commentId: P:Butterfly.Core.Database.BaseStatement.Sql
  id: Sql
  parent: Butterfly.Core.Database.BaseStatement
  langs:
  - csharp
  - vb
  name: Sql
  nameWithType: BaseStatement.Sql
  fullName: Butterfly.Core.Database.BaseStatement.Sql
  type: Property
  source:
    remote:
      path: Butterfly.Core/Database/Statements/BaseStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: Sql
    path: ../Butterfly.Core/Database/Statements/BaseStatement.cs
    startLine: 23
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: public string Sql { get; protected set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Sql As String
  overload: Butterfly.Core.Database.BaseStatement.Sql*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Butterfly.Core.Database.BaseStatement.StatementFromRefs
  commentId: P:Butterfly.Core.Database.BaseStatement.StatementFromRefs
  id: StatementFromRefs
  parent: Butterfly.Core.Database.BaseStatement
  langs:
  - csharp
  - vb
  name: StatementFromRefs
  nameWithType: BaseStatement.StatementFromRefs
  fullName: Butterfly.Core.Database.BaseStatement.StatementFromRefs
  type: Property
  source:
    remote:
      path: Butterfly.Core/Database/Statements/BaseStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: StatementFromRefs
    path: ../Butterfly.Core/Database/Statements/BaseStatement.cs
    startLine: 29
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: public StatementFromRef[] StatementFromRefs { get; protected set; }
    parameters: []
    return:
      type: Butterfly.Core.Database.StatementFromRef[]
    content.vb: Public Property StatementFromRefs As StatementFromRef()
  overload: Butterfly.Core.Database.BaseStatement.StatementFromRefs*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Butterfly.Core.Database.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  commentId: M:Butterfly.Core.Database.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  id: FindStatementFromRefByTableAlias(System.String)
  parent: Butterfly.Core.Database.BaseStatement
  langs:
  - csharp
  - vb
  name: FindStatementFromRefByTableAlias(String)
  nameWithType: BaseStatement.FindStatementFromRefByTableAlias(String)
  fullName: Butterfly.Core.Database.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/Statements/BaseStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: FindStatementFromRefByTableAlias
    path: ../Butterfly.Core/Database/Statements/BaseStatement.cs
    startLine: 41
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: public StatementFromRef FindStatementFromRefByTableAlias(string tableAlias)
    parameters:
    - id: tableAlias
      type: System.String
    return:
      type: Butterfly.Core.Database.StatementFromRef
    content.vb: Public Function FindStatementFromRefByTableAlias(tableAlias As String) As StatementFromRef
  overload: Butterfly.Core.Database.BaseStatement.FindStatementFromRefByTableAlias*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Butterfly.Core.Database.BaseStatement.fromTableNames
  commentId: F:Butterfly.Core.Database.BaseStatement.fromTableNames
  id: fromTableNames
  parent: Butterfly.Core.Database.BaseStatement
  langs:
  - csharp
  - vb
  name: fromTableNames
  nameWithType: BaseStatement.fromTableNames
  fullName: Butterfly.Core.Database.BaseStatement.fromTableNames
  type: Field
  source:
    remote:
      path: Butterfly.Core/Database/Statements/BaseStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: fromTableNames
    path: ../Butterfly.Core/Database/Statements/BaseStatement.cs
    startLine: 45
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: protected readonly HashSet<string> fromTableNames
    return:
      type: HashSet{System.String}
    content.vb: Protected ReadOnly fromTableNames As HashSet(Of String)
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Butterfly.Core.Database.BaseStatement.HasTableInFrom(System.String)
  commentId: M:Butterfly.Core.Database.BaseStatement.HasTableInFrom(System.String)
  id: HasTableInFrom(System.String)
  parent: Butterfly.Core.Database.BaseStatement
  langs:
  - csharp
  - vb
  name: HasTableInFrom(String)
  nameWithType: BaseStatement.HasTableInFrom(String)
  fullName: Butterfly.Core.Database.BaseStatement.HasTableInFrom(System.String)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/Statements/BaseStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: HasTableInFrom
    path: ../Butterfly.Core/Database/Statements/BaseStatement.cs
    startLine: 46
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: public bool HasTableInFrom(string tableName)
    parameters:
    - id: tableName
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function HasTableInFrom(tableName As String) As Boolean
  overload: Butterfly.Core.Database.BaseStatement.HasTableInFrom*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Butterfly.Core.Database.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:Butterfly.Core.Database.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: Butterfly.Core.Database.BaseStatement
  langs:
  - csharp
  - vb
  name: ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary<String, Object>)
  nameWithType: BaseStatement.ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary<String, Object>)
  fullName: Butterfly.Core.Database.BaseStatement.ConfirmAllParamsUsed(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/Statements/BaseStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: ConfirmAllParamsUsed
    path: ../Butterfly.Core/Database/Statements/BaseStatement.cs
    startLine: 50
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: public static void ConfirmAllParamsUsed(string sql, System.Collections.Generic.Dictionary<string, object> statementParams)
    parameters:
    - id: sql
      type: System.String
    - id: statementParams
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    content.vb: Public Shared Sub ConfirmAllParamsUsed(sql As String, statementParams As System.Collections.Generic.Dictionary(Of String, Object))
  overload: Butterfly.Core.Database.BaseStatement.ConfirmAllParamsUsed*
  nameWithType.vb: BaseStatement.ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Butterfly.Core.Database.BaseStatement.ConfirmAllParamsUsed(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary(Of String, Object))
- uid: Butterfly.Core.Database.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
  commentId: M:Butterfly.Core.Database.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
  id: ConvertParamsToDict(System.Object,System.Boolean)
  parent: Butterfly.Core.Database.BaseStatement
  langs:
  - csharp
  - vb
  name: ConvertParamsToDict(Object, Boolean)
  nameWithType: BaseStatement.ConvertParamsToDict(Object, Boolean)
  fullName: Butterfly.Core.Database.BaseStatement.ConvertParamsToDict(System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/Statements/BaseStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: ConvertParamsToDict
    path: ../Butterfly.Core/Database/Statements/BaseStatement.cs
    startLine: 57
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: public System.Collections.Generic.Dictionary<string, object> ConvertParamsToDict(dynamic statementParams, bool allowKeyValueAsSourceParams = true)
    parameters:
    - id: statementParams
      type: System.Object
    - id: allowKeyValueAsSourceParams
      type: System.Boolean
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    content.vb: Public Function ConvertParamsToDict(statementParams As Object, allowKeyValueAsSourceParams As Boolean = True) As System.Collections.Generic.Dictionary(Of String, Object)
  overload: Butterfly.Core.Database.BaseStatement.ConvertParamsToDict*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Butterfly.Core.Database.BaseStatement.EQUALS_REF_REGEX
  commentId: F:Butterfly.Core.Database.BaseStatement.EQUALS_REF_REGEX
  id: EQUALS_REF_REGEX
  parent: Butterfly.Core.Database.BaseStatement
  langs:
  - csharp
  - vb
  name: EQUALS_REF_REGEX
  nameWithType: BaseStatement.EQUALS_REF_REGEX
  fullName: Butterfly.Core.Database.BaseStatement.EQUALS_REF_REGEX
  type: Field
  source:
    remote:
      path: Butterfly.Core/Database/Statements/BaseStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: EQUALS_REF_REGEX
    path: ../Butterfly.Core/Database/Statements/BaseStatement.cs
    startLine: 82
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: protected static readonly Regex EQUALS_REF_REGEX
    return:
      type: Regex
    content.vb: Protected Shared ReadOnly EQUALS_REF_REGEX As Regex
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: Butterfly.Core.Database.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Core.Database.StatementEqualsRef[])
  commentId: M:Butterfly.Core.Database.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Core.Database.StatementEqualsRef[])
  id: RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Core.Database.StatementEqualsRef[])
  parent: Butterfly.Core.Database.BaseStatement
  langs:
  - csharp
  - vb
  name: RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary<String, Object>, StatementEqualsRef[])
  nameWithType: BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary<String, Object>, StatementEqualsRef[])
  fullName: Butterfly.Core.Database.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary<System.String, System.Object>, Butterfly.Core.Database.StatementEqualsRef[])
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/Statements/BaseStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: RemapStatementParamsToFieldValues
    path: ../Butterfly.Core/Database/Statements/BaseStatement.cs
    startLine: 93
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  syntax:
    content: public static System.Collections.Generic.Dictionary<string, object> RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary<string, object> statementParamsDict, StatementEqualsRef[] equalsRefs)
    parameters:
    - id: statementParamsDict
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    - id: equalsRefs
      type: Butterfly.Core.Database.StatementEqualsRef[]
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    content.vb: Public Shared Function RemapStatementParamsToFieldValues(statementParamsDict As System.Collections.Generic.Dictionary(Of String, Object), equalsRefs As StatementEqualsRef()) As System.Collections.Generic.Dictionary(Of String, Object)
  overload: Butterfly.Core.Database.BaseStatement.RemapStatementParamsToFieldValues*
  nameWithType.vb: BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary(Of String, Object), StatementEqualsRef())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Butterfly.Core.Database.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary(Of System.String, System.Object), Butterfly.Core.Database.StatementEqualsRef())
  name.vb: RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary(Of String, Object), StatementEqualsRef())
references:
- uid: Butterfly.Core.Database
  commentId: N:Butterfly.Core.Database
  name: Butterfly.Core.Database
  nameWithType: Butterfly.Core.Database
  fullName: Butterfly.Core.Database
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Butterfly.Core.Database.BaseStatement.IsSqlTableName*
  commentId: Overload:Butterfly.Core.Database.BaseStatement.IsSqlTableName
  name: IsSqlTableName
  nameWithType: BaseStatement.IsSqlTableName
  fullName: Butterfly.Core.Database.BaseStatement.IsSqlTableName
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Butterfly.Core.Database.BaseStatement.Sql*
  commentId: Overload:Butterfly.Core.Database.BaseStatement.Sql
  name: Sql
  nameWithType: BaseStatement.Sql
  fullName: Butterfly.Core.Database.BaseStatement.Sql
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Butterfly.Core.Database.BaseStatement.StatementFromRefs*
  commentId: Overload:Butterfly.Core.Database.BaseStatement.StatementFromRefs
  name: StatementFromRefs
  nameWithType: BaseStatement.StatementFromRefs
  fullName: Butterfly.Core.Database.BaseStatement.StatementFromRefs
- uid: Butterfly.Core.Database.StatementFromRef[]
  isExternal: true
  name: StatementFromRef[]
  nameWithType: StatementFromRef[]
  fullName: Butterfly.Core.Database.StatementFromRef[]
  nameWithType.vb: StatementFromRef()
  fullName.vb: Butterfly.Core.Database.StatementFromRef()
  name.vb: StatementFromRef()
  spec.csharp:
  - uid: Butterfly.Core.Database.StatementFromRef
    name: StatementFromRef
    nameWithType: StatementFromRef
    fullName: Butterfly.Core.Database.StatementFromRef
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Butterfly.Core.Database.StatementFromRef
    name: StatementFromRef
    nameWithType: StatementFromRef
    fullName: Butterfly.Core.Database.StatementFromRef
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Butterfly.Core.Database.BaseStatement.FindStatementFromRefByTableAlias*
  commentId: Overload:Butterfly.Core.Database.BaseStatement.FindStatementFromRefByTableAlias
  name: FindStatementFromRefByTableAlias
  nameWithType: BaseStatement.FindStatementFromRefByTableAlias
  fullName: Butterfly.Core.Database.BaseStatement.FindStatementFromRefByTableAlias
- uid: Butterfly.Core.Database.StatementFromRef
  commentId: T:Butterfly.Core.Database.StatementFromRef
  parent: Butterfly.Core.Database
  name: StatementFromRef
  nameWithType: StatementFromRef
  fullName: Butterfly.Core.Database.StatementFromRef
- uid: HashSet{System.String}
  commentId: '!:HashSet{System.String}'
  definition: HashSet`1
  name: HashSet<String>
  nameWithType: HashSet<String>
  fullName: HashSet<System.String>
  nameWithType.vb: HashSet(Of String)
  fullName.vb: HashSet(Of System.String)
  name.vb: HashSet(Of String)
  spec.csharp:
  - uid: HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: HashSet`1
  isExternal: true
  name: HashSet<>
  nameWithType: HashSet<>
  fullName: HashSet<>
  nameWithType.vb: HashSet(Of )
  fullName.vb: HashSet(Of )
  name.vb: HashSet(Of )
  spec.csharp:
  - uid: HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Database.BaseStatement.HasTableInFrom*
  commentId: Overload:Butterfly.Core.Database.BaseStatement.HasTableInFrom
  name: HasTableInFrom
  nameWithType: BaseStatement.HasTableInFrom
  fullName: Butterfly.Core.Database.BaseStatement.HasTableInFrom
- uid: Butterfly.Core.Database.BaseStatement.ConfirmAllParamsUsed*
  commentId: Overload:Butterfly.Core.Database.BaseStatement.ConfirmAllParamsUsed
  name: ConfirmAllParamsUsed
  nameWithType: BaseStatement.ConfirmAllParamsUsed
  fullName: Butterfly.Core.Database.BaseStatement.ConfirmAllParamsUsed
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: '!:System.Collections.Generic.Dictionary{System.String,System.Object}'
  definition: System.Collections.Generic.Dictionary`2
  name: System.Collections.Generic.Dictionary<String, Object>
  nameWithType: System.Collections.Generic.Dictionary<String, Object>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
  nameWithType.vb: System.Collections.Generic.Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
  name.vb: System.Collections.Generic.Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  isExternal: true
  name: System.Collections.Generic.Dictionary<, >
  nameWithType: System.Collections.Generic.Dictionary<, >
  fullName: System.Collections.Generic.Dictionary<, >
  nameWithType.vb: System.Collections.Generic.Dictionary(Of , )
  fullName.vb: System.Collections.Generic.Dictionary(Of , )
  name.vb: System.Collections.Generic.Dictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Database.BaseStatement.ConvertParamsToDict*
  commentId: Overload:Butterfly.Core.Database.BaseStatement.ConvertParamsToDict
  name: ConvertParamsToDict
  nameWithType: BaseStatement.ConvertParamsToDict
  fullName: Butterfly.Core.Database.BaseStatement.ConvertParamsToDict
- uid: Regex
  isExternal: true
  name: Regex
  nameWithType: Regex
  fullName: Regex
- uid: Butterfly.Core.Database.BaseStatement.RemapStatementParamsToFieldValues*
  commentId: Overload:Butterfly.Core.Database.BaseStatement.RemapStatementParamsToFieldValues
  name: RemapStatementParamsToFieldValues
  nameWithType: BaseStatement.RemapStatementParamsToFieldValues
  fullName: Butterfly.Core.Database.BaseStatement.RemapStatementParamsToFieldValues
- uid: Butterfly.Core.Database.StatementEqualsRef[]
  isExternal: true
  name: StatementEqualsRef[]
  nameWithType: StatementEqualsRef[]
  fullName: Butterfly.Core.Database.StatementEqualsRef[]
  nameWithType.vb: StatementEqualsRef()
  fullName.vb: Butterfly.Core.Database.StatementEqualsRef()
  name.vb: StatementEqualsRef()
  spec.csharp:
  - uid: Butterfly.Core.Database.StatementEqualsRef
    name: StatementEqualsRef
    nameWithType: StatementEqualsRef
    fullName: Butterfly.Core.Database.StatementEqualsRef
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Butterfly.Core.Database.StatementEqualsRef
    name: StatementEqualsRef
    nameWithType: StatementEqualsRef
    fullName: Butterfly.Core.Database.StatementEqualsRef
  - name: ()
    nameWithType: ()
    fullName: ()
shouldSkipMarkup: true

### YamlMime:ManagedReference
items:
- uid: Butterfly.Core.Util.DictionaryX
  commentId: T:Butterfly.Core.Util.DictionaryX
  id: DictionaryX
  parent: Butterfly.Core.Util
  children:
  - Butterfly.Core.Util.DictionaryX.Deconstruct``2(KeyValuePair{``0,``1},``0@,``1@)
  - Butterfly.Core.Util.DictionaryX.Format(Dictionary{System.String,System.Object},System.String,System.String,System.String)
  - Butterfly.Core.Util.DictionaryX.GetAs``3(Dictionary{``0,``1},``0,``2)
  - Butterfly.Core.Util.DictionaryX.IsSame``2(Dictionary{``0,``1},Dictionary{``0,``1})
  - Butterfly.Core.Util.DictionaryX.ToString``2(Dictionary{``0,``1},System.String,System.String)
  - Butterfly.Core.Util.DictionaryX.UpdateFrom``2(Dictionary{``0,``1},Dictionary{``0,``1})
  langs:
  - csharp
  - vb
  name: DictionaryX
  nameWithType: DictionaryX
  fullName: Butterfly.Core.Util.DictionaryX
  type: Class
  source:
    remote:
      path: Butterfly.Core/Util/DictionaryX.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: DictionaryX
    path: ../Butterfly.Core/Util/DictionaryX.cs
    startLine: 12
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Util
  syntax:
    content: 'public static class DictionaryX : object'
    content.vb: >-
      Public Module DictionaryX
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Butterfly.Core.Util.DictionaryX.ToString``2(Dictionary{``0,``1},System.String,System.String)
  commentId: M:Butterfly.Core.Util.DictionaryX.ToString``2(Dictionary{``0,``1},System.String,System.String)
  id: ToString``2(Dictionary{``0,``1},System.String,System.String)
  isExtensionMethod: true
  parent: Butterfly.Core.Util.DictionaryX
  langs:
  - csharp
  - vb
  name: ToString<T, U>(Dictionary<T, U>, String, String)
  nameWithType: DictionaryX.ToString<T, U>(Dictionary<T, U>, String, String)
  fullName: Butterfly.Core.Util.DictionaryX.ToString<T, U>(Dictionary<T, U>, System.String, System.String)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Util/DictionaryX.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: ToString
    path: ../Butterfly.Core/Util/DictionaryX.cs
    startLine: 14
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Util
  syntax:
    content: public static string ToString<T, U>(this Dictionary<T, U> me, string keyValueDelim, string itemDelim)
    parameters:
    - id: me
      type: Dictionary{{T},{U}}
    - id: keyValueDelim
      type: System.String
    - id: itemDelim
      type: System.String
    typeParameters:
    - id: T
    - id: U
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToString(Of T, U)(me As Dictionary(Of T, U), keyValueDelim As String, itemDelim As String) As String
  overload: Butterfly.Core.Util.DictionaryX.ToString*
  nameWithType.vb: DictionaryX.ToString(Of T, U)(Dictionary(Of T, U), String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Butterfly.Core.Util.DictionaryX.ToString(Of T, U)(Dictionary(Of T, U), System.String, System.String)
  name.vb: ToString(Of T, U)(Dictionary(Of T, U), String, String)
- uid: Butterfly.Core.Util.DictionaryX.GetAs``3(Dictionary{``0,``1},``0,``2)
  commentId: M:Butterfly.Core.Util.DictionaryX.GetAs``3(Dictionary{``0,``1},``0,``2)
  id: GetAs``3(Dictionary{``0,``1},``0,``2)
  isExtensionMethod: true
  parent: Butterfly.Core.Util.DictionaryX
  langs:
  - csharp
  - vb
  name: GetAs<T, U, V>(Dictionary<T, U>, T, V)
  nameWithType: DictionaryX.GetAs<T, U, V>(Dictionary<T, U>, T, V)
  fullName: Butterfly.Core.Util.DictionaryX.GetAs<T, U, V>(Dictionary<T, U>, T, V)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Util/DictionaryX.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: GetAs
    path: ../Butterfly.Core/Util/DictionaryX.cs
    startLine: 18
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Util
  syntax:
    content: public static V GetAs<T, U, V>(this Dictionary<T, U> me, T key, V defaultValue)
    parameters:
    - id: me
      type: Dictionary{{T},{U}}
    - id: key
      type: '{T}'
    - id: defaultValue
      type: '{V}'
    typeParameters:
    - id: T
    - id: U
    - id: V
    return:
      type: '{V}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAs(Of T, U, V)(me As Dictionary(Of T, U), key As T, defaultValue As V) As V
  overload: Butterfly.Core.Util.DictionaryX.GetAs*
  nameWithType.vb: DictionaryX.GetAs(Of T, U, V)(Dictionary(Of T, U), T, V)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Butterfly.Core.Util.DictionaryX.GetAs(Of T, U, V)(Dictionary(Of T, U), T, V)
  name.vb: GetAs(Of T, U, V)(Dictionary(Of T, U), T, V)
- uid: Butterfly.Core.Util.DictionaryX.Deconstruct``2(KeyValuePair{``0,``1},``0@,``1@)
  commentId: M:Butterfly.Core.Util.DictionaryX.Deconstruct``2(KeyValuePair{``0,``1},``0@,``1@)
  id: Deconstruct``2(KeyValuePair{``0,``1},``0@,``1@)
  isExtensionMethod: true
  parent: Butterfly.Core.Util.DictionaryX
  langs:
  - csharp
  - vb
  name: Deconstruct<T1, T2>(KeyValuePair<T1, T2>, out T1, out T2)
  nameWithType: DictionaryX.Deconstruct<T1, T2>(KeyValuePair<T1, T2>, out T1, out T2)
  fullName: Butterfly.Core.Util.DictionaryX.Deconstruct<T1, T2>(KeyValuePair<T1, T2>, out T1, out T2)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Util/DictionaryX.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: Deconstruct
    path: ../Butterfly.Core/Util/DictionaryX.cs
    startLine: 53
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Util
  syntax:
    content: public static void Deconstruct<T1, T2>(this KeyValuePair<T1, T2> tuple, out T1 key, out T2 value)
    parameters:
    - id: tuple
      type: KeyValuePair{{T1},{T2}}
    - id: key
      type: '{T1}'
    - id: value
      type: '{T2}'
    typeParameters:
    - id: T1
    - id: T2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Deconstruct(Of T1, T2)(tuple As KeyValuePair(Of T1, T2), ByRef key As T1, ByRef value As T2)
  overload: Butterfly.Core.Util.DictionaryX.Deconstruct*
  nameWithType.vb: DictionaryX.Deconstruct(Of T1, T2)(KeyValuePair(Of T1, T2), ByRef T1, ByRef T2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Butterfly.Core.Util.DictionaryX.Deconstruct(Of T1, T2)(KeyValuePair(Of T1, T2), ByRef T1, ByRef T2)
  name.vb: Deconstruct(Of T1, T2)(KeyValuePair(Of T1, T2), ByRef T1, ByRef T2)
- uid: Butterfly.Core.Util.DictionaryX.UpdateFrom``2(Dictionary{``0,``1},Dictionary{``0,``1})
  commentId: M:Butterfly.Core.Util.DictionaryX.UpdateFrom``2(Dictionary{``0,``1},Dictionary{``0,``1})
  id: UpdateFrom``2(Dictionary{``0,``1},Dictionary{``0,``1})
  isExtensionMethod: true
  parent: Butterfly.Core.Util.DictionaryX
  langs:
  - csharp
  - vb
  name: UpdateFrom<T, U>(Dictionary<T, U>, Dictionary<T, U>)
  nameWithType: DictionaryX.UpdateFrom<T, U>(Dictionary<T, U>, Dictionary<T, U>)
  fullName: Butterfly.Core.Util.DictionaryX.UpdateFrom<T, U>(Dictionary<T, U>, Dictionary<T, U>)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Util/DictionaryX.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: UpdateFrom
    path: ../Butterfly.Core/Util/DictionaryX.cs
    startLine: 58
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Util
  syntax:
    content: public static Dictionary<T, U> UpdateFrom<T, U>(this Dictionary<T, U> me, Dictionary<T, U> from)
    parameters:
    - id: me
      type: Dictionary{{T},{U}}
    - id: from
      type: Dictionary{{T},{U}}
    typeParameters:
    - id: T
    - id: U
    return:
      type: Dictionary{{T},{U}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpdateFrom(Of T, U)(me As Dictionary(Of T, U), from As Dictionary(Of T, U)) As Dictionary(Of T, U)
  overload: Butterfly.Core.Util.DictionaryX.UpdateFrom*
  nameWithType.vb: DictionaryX.UpdateFrom(Of T, U)(Dictionary(Of T, U), Dictionary(Of T, U))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Butterfly.Core.Util.DictionaryX.UpdateFrom(Of T, U)(Dictionary(Of T, U), Dictionary(Of T, U))
  name.vb: UpdateFrom(Of T, U)(Dictionary(Of T, U), Dictionary(Of T, U))
- uid: Butterfly.Core.Util.DictionaryX.IsSame``2(Dictionary{``0,``1},Dictionary{``0,``1})
  commentId: M:Butterfly.Core.Util.DictionaryX.IsSame``2(Dictionary{``0,``1},Dictionary{``0,``1})
  id: IsSame``2(Dictionary{``0,``1},Dictionary{``0,``1})
  isExtensionMethod: true
  parent: Butterfly.Core.Util.DictionaryX
  langs:
  - csharp
  - vb
  name: IsSame<T, U>(Dictionary<T, U>, Dictionary<T, U>)
  nameWithType: DictionaryX.IsSame<T, U>(Dictionary<T, U>, Dictionary<T, U>)
  fullName: Butterfly.Core.Util.DictionaryX.IsSame<T, U>(Dictionary<T, U>, Dictionary<T, U>)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Util/DictionaryX.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: IsSame
    path: ../Butterfly.Core/Util/DictionaryX.cs
    startLine: 67
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Util
  syntax:
    content: public static bool IsSame<T, U>(this Dictionary<T, U> me, Dictionary<T, U> other)
    parameters:
    - id: me
      type: Dictionary{{T},{U}}
    - id: other
      type: Dictionary{{T},{U}}
    typeParameters:
    - id: T
    - id: U
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsSame(Of T, U)(me As Dictionary(Of T, U), other As Dictionary(Of T, U)) As Boolean
  overload: Butterfly.Core.Util.DictionaryX.IsSame*
  nameWithType.vb: DictionaryX.IsSame(Of T, U)(Dictionary(Of T, U), Dictionary(Of T, U))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Butterfly.Core.Util.DictionaryX.IsSame(Of T, U)(Dictionary(Of T, U), Dictionary(Of T, U))
  name.vb: IsSame(Of T, U)(Dictionary(Of T, U), Dictionary(Of T, U))
- uid: Butterfly.Core.Util.DictionaryX.Format(Dictionary{System.String,System.Object},System.String,System.String,System.String)
  commentId: M:Butterfly.Core.Util.DictionaryX.Format(Dictionary{System.String,System.Object},System.String,System.String,System.String)
  id: Format(Dictionary{System.String,System.Object},System.String,System.String,System.String)
  isExtensionMethod: true
  parent: Butterfly.Core.Util.DictionaryX
  langs:
  - csharp
  - vb
  name: Format(Dictionary<String, Object>, String, String, String)
  nameWithType: DictionaryX.Format(Dictionary<String, Object>, String, String, String)
  fullName: Butterfly.Core.Util.DictionaryX.Format(Dictionary<System.String, System.Object>, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Util/DictionaryX.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: Format
    path: ../Butterfly.Core/Util/DictionaryX.cs
    startLine: 88
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Util
  syntax:
    content: public static string Format(this Dictionary<string, object> dictionary, string format, string paramOpenDelim = "{", string paramCloseDelim = "}")
    parameters:
    - id: dictionary
      type: Dictionary{System.String,System.Object}
    - id: format
      type: System.String
    - id: paramOpenDelim
      type: System.String
    - id: paramCloseDelim
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Format(dictionary As Dictionary(Of String, Object), format As String, paramOpenDelim As String = "{", paramCloseDelim As String = "}") As String
  overload: Butterfly.Core.Util.DictionaryX.Format*
  nameWithType.vb: DictionaryX.Format(Dictionary(Of String, Object), String, String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Butterfly.Core.Util.DictionaryX.Format(Dictionary(Of System.String, System.Object), System.String, System.String, System.String)
  name.vb: Format(Dictionary(Of String, Object), String, String, String)
references:
- uid: Butterfly.Core.Util
  commentId: N:Butterfly.Core.Util
  name: Butterfly.Core.Util
  nameWithType: Butterfly.Core.Util
  fullName: Butterfly.Core.Util
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Butterfly.Core.Util.DictionaryX.ToString*
  commentId: Overload:Butterfly.Core.Util.DictionaryX.ToString
  name: ToString
  nameWithType: DictionaryX.ToString
  fullName: Butterfly.Core.Util.DictionaryX.ToString
- uid: Dictionary{{T},{U}}
  commentId: '!:Dictionary{`0,`1}'
  definition: Dictionary`2
  name: Dictionary<T, U>
  nameWithType: Dictionary<T, U>
  fullName: Dictionary<T, U>
  nameWithType.vb: Dictionary(Of T, U)
  fullName.vb: Dictionary(Of T, U)
  name.vb: Dictionary(Of T, U)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: U
    nameWithType: U
    fullName: U
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Util.DictionaryX.GetAs*
  commentId: Overload:Butterfly.Core.Util.DictionaryX.GetAs
  name: GetAs
  nameWithType: DictionaryX.GetAs
  fullName: Butterfly.Core.Util.DictionaryX.GetAs
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: '{V}'
  commentId: '!:V'
  definition: V
  name: V
  nameWithType: V
  fullName: V
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: V
  name: V
  nameWithType: V
  fullName: V
- uid: Butterfly.Core.Util.DictionaryX.Deconstruct*
  commentId: Overload:Butterfly.Core.Util.DictionaryX.Deconstruct
  name: Deconstruct
  nameWithType: DictionaryX.Deconstruct
  fullName: Butterfly.Core.Util.DictionaryX.Deconstruct
- uid: KeyValuePair{{T1},{T2}}
  commentId: '!:KeyValuePair{``0,``1}'
  definition: KeyValuePair`2
  name: KeyValuePair<T1, T2>
  nameWithType: KeyValuePair<T1, T2>
  fullName: KeyValuePair<T1, T2>
  nameWithType.vb: KeyValuePair(Of T1, T2)
  fullName.vb: KeyValuePair(Of T1, T2)
  name.vb: KeyValuePair(Of T1, T2)
  spec.csharp:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: '{T2}'
  commentId: '!:T2'
  definition: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: KeyValuePair`2
  commentId: '!:KeyValuePair`2'
  isExternal: true
  name: KeyValuePair<, >
  nameWithType: KeyValuePair<, >
  fullName: KeyValuePair<, >
  nameWithType.vb: KeyValuePair(Of , )
  fullName.vb: KeyValuePair(Of , )
  name.vb: KeyValuePair(Of , )
  spec.csharp:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T1
  commentId: '!:T1'
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  commentId: '!:T2'
  name: T2
  nameWithType: T2
  fullName: T2
- uid: Butterfly.Core.Util.DictionaryX.UpdateFrom*
  commentId: Overload:Butterfly.Core.Util.DictionaryX.UpdateFrom
  name: UpdateFrom
  nameWithType: DictionaryX.UpdateFrom
  fullName: Butterfly.Core.Util.DictionaryX.UpdateFrom
- uid: Butterfly.Core.Util.DictionaryX.IsSame*
  commentId: Overload:Butterfly.Core.Util.DictionaryX.IsSame
  name: IsSame
  nameWithType: DictionaryX.IsSame
  fullName: Butterfly.Core.Util.DictionaryX.IsSame
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Butterfly.Core.Util.DictionaryX.Format*
  commentId: Overload:Butterfly.Core.Util.DictionaryX.Format
  name: Format
  nameWithType: DictionaryX.Format
  fullName: Butterfly.Core.Util.DictionaryX.Format
- uid: Dictionary{System.String,System.Object}
  commentId: '!:Dictionary{System.String,System.Object}'
  definition: Dictionary`2
  name: Dictionary<String, Object>
  nameWithType: Dictionary<String, Object>
  fullName: Dictionary<System.String, System.Object>
  nameWithType.vb: Dictionary(Of String, Object)
  fullName.vb: Dictionary(Of System.String, System.Object)
  name.vb: Dictionary(Of String, Object)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true

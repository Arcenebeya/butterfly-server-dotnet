### YamlMime:ManagedReference
items:
- uid: Butterfly.Core.Util.UriX
  commentId: T:Butterfly.Core.Util.UriX
  id: UriX
  parent: Butterfly.Core.Util
  children:
  - Butterfly.Core.Util.UriX.ParseQuery(Uri)
  langs:
  - csharp
  - vb
  name: UriX
  nameWithType: UriX
  fullName: Butterfly.Core.Util.UriX
  type: Class
  source:
    remote:
      path: Butterfly.Core/Util/UriX.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-server-dotnet
    id: UriX
    path: ../Butterfly.Core/Util/UriX.cs
    startLine: 9
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Util
  syntax:
    content: 'public static class UriX : object'
    content.vb: >-
      Public Module UriX
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Butterfly.Core.Util.UriX.ParseQuery(Uri)
  commentId: M:Butterfly.Core.Util.UriX.ParseQuery(Uri)
  id: ParseQuery(Uri)
  isExtensionMethod: true
  parent: Butterfly.Core.Util.UriX
  langs:
  - csharp
  - vb
  name: ParseQuery(Uri)
  nameWithType: UriX.ParseQuery(Uri)
  fullName: Butterfly.Core.Util.UriX.ParseQuery(Uri)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Util/UriX.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-server-dotnet
    id: ParseQuery
    path: ../Butterfly.Core/Util/UriX.cs
    startLine: 10
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Util
  syntax:
    content: public static Dictionary<string, string> ParseQuery(this Uri me)
    parameters:
    - id: me
      type: Uri
    return:
      type: Dictionary{System.String,System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ParseQuery(me As Uri) As Dictionary(Of String, String)
  overload: Butterfly.Core.Util.UriX.ParseQuery*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Butterfly.Core.Util
  commentId: N:Butterfly.Core.Util
  name: Butterfly.Core.Util
  nameWithType: Butterfly.Core.Util
  fullName: Butterfly.Core.Util
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Butterfly.Core.Util.UriX.ParseQuery*
  commentId: Overload:Butterfly.Core.Util.UriX.ParseQuery
  name: ParseQuery
  nameWithType: UriX.ParseQuery
  fullName: Butterfly.Core.Util.UriX.ParseQuery
- uid: Uri
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: Uri
- uid: Dictionary{System.String,System.String}
  commentId: '!:Dictionary{System.String,System.String}'
  definition: Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true

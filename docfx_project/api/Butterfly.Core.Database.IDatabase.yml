### YamlMime:ManagedReference
items:
- uid: Butterfly.Core.Database.IDatabase
  commentId: T:Butterfly.Core.Database.IDatabase
  id: IDatabase
  parent: Butterfly.Core.Database
  children:
  - Butterfly.Core.Database.IDatabase.AddInputPreprocessor(Action{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}})
  - Butterfly.Core.Database.IDatabase.BeginTransaction
  - Butterfly.Core.Database.IDatabase.BeginTransactionAsync
  - Butterfly.Core.Database.IDatabase.CanFieldAlias
  - Butterfly.Core.Database.IDatabase.CanJoin
  - Butterfly.Core.Database.IDatabase.CreateAndStartDynamicViewAsync(System.String,Action{Butterfly.Core.Database.Event.DataEventTransaction},System.Object,System.String,System.String[])
  - Butterfly.Core.Database.IDatabase.CreateAndStartDynamicViewAsync(System.String,Func{Butterfly.Core.Database.Event.DataEventTransaction,Task},System.Object,System.String,System.String[])
  - Butterfly.Core.Database.IDatabase.CreateDynamicViewSet(Action{Butterfly.Core.Database.Event.DataEventTransaction})
  - Butterfly.Core.Database.IDatabase.CreateDynamicViewSet(Func{Butterfly.Core.Database.Event.DataEventTransaction,Task})
  - Butterfly.Core.Database.IDatabase.CreateFromResourceFileAsync(Assembly,System.String)
  - Butterfly.Core.Database.IDatabase.CreateFromSqlAsync(System.String)
  - Butterfly.Core.Database.IDatabase.DeleteAndCommitAsync(System.String,System.Object)
  - Butterfly.Core.Database.IDatabase.GetInitialDataEventsAsync(System.String,System.String[],Butterfly.Core.Database.SelectStatement,System.Object)
  - Butterfly.Core.Database.IDatabase.InsertAndCommitAsync``1(System.String,System.Object,System.Boolean)
  - Butterfly.Core.Database.IDatabase.OnNewCommittedTransaction(Action{Butterfly.Core.Database.Event.DataEventTransaction})
  - Butterfly.Core.Database.IDatabase.OnNewCommittedTransaction(Func{Butterfly.Core.Database.Event.DataEventTransaction,Task})
  - Butterfly.Core.Database.IDatabase.OnNewUncommittedTransaction(Action{Butterfly.Core.Database.Event.DataEventTransaction})
  - Butterfly.Core.Database.IDatabase.OnNewUncommittedTransaction(Func{Butterfly.Core.Database.Event.DataEventTransaction,Task})
  - Butterfly.Core.Database.IDatabase.QueryRowAsync(System.String,System.Object)
  - Butterfly.Core.Database.IDatabase.QueryRowsAsync(System.String,System.Object)
  - Butterfly.Core.Database.IDatabase.QueryValueAsync``1(System.String,System.Object,``0)
  - Butterfly.Core.Database.IDatabase.SelectCount
  - Butterfly.Core.Database.IDatabase.SelectRowAsync(System.String,System.Object)
  - Butterfly.Core.Database.IDatabase.SelectRowsAsync(Butterfly.Core.Database.SelectStatement,System.Object)
  - Butterfly.Core.Database.IDatabase.SelectRowsAsync(System.String,System.Object)
  - Butterfly.Core.Database.IDatabase.SelectValueAsync``1(System.String,System.Object,``0)
  - Butterfly.Core.Database.IDatabase.SelectValuesAsync``1(System.String,System.Object)
  - Butterfly.Core.Database.IDatabase.SetDefaultValue(System.String,Func{System.String,System.Object},System.String)
  - Butterfly.Core.Database.IDatabase.SetOverrideValue(System.String,Func{System.String,System.Object},System.String)
  - Butterfly.Core.Database.IDatabase.TableByName
  - Butterfly.Core.Database.IDatabase.UpdateAndCommitAsync(System.String,System.Object)
  langs:
  - csharp
  - vb
  name: IDatabase
  nameWithType: IDatabase
  fullName: Butterfly.Core.Database.IDatabase
  type: Interface
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: IDatabase
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 76
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nAllows executing SELECT statements, creating transactions to execute INSERT, UPDATE, and DELETE statements; \ncreating dynamic views; and receiving data change events both on tables and dynamic views.\n"
  example:
  - "\nAdding records and echoing all data change events to the console...<p></p>\n<pre><code>// Create database instance (will also read the schema from the database)\nvar database = new SomeDatabase();\n\n// Listen for all database data events\nvar databaseListener = database.OnNewCommittedTransaction(dataEventTransaction => {\n    console.WriteLine($&quot;Low Level DataEventTransaction={dataEventTransaction}&quot;);\n});\n\n// INSERT a couple of records (this will cause a single data even transaction with\n// two INSERT data events to be written to the console above)\nusing (var transaction = database.BeginTransaction()) {\n    await database.InsertAndCommitAsync(&quot;employee&quot;, values: new {\n        department_id: 1,\n        name: &quot;SpongeBob&quot;\n    });\n    await database.InsertAndCommitAsync(&quot;employee&quot;, values: new {\n        department_id: 1,\n        name: &quot;Squidward&quot;\n    });\n    await database.CommitAsync();\n);</code></pre>\n\nCreating a DynamicView and echoing data change events on the DynamicView to the console...<p></p>\n<pre><code>// Create database instance (will also read the schema from the database)\nvar database = new SomeDatabase();\n\n// Create a DynamicViewSet that print any data events to the console\n// (this will immediately echo an INITIAL data event for each existing matching record)\nvar dynamicViewSet = database.CreateAndStartDynamicViewSet(\n    &quot;SELECT * FROM employee WHERE department_id=@departmentId&quot;, \n    new {\n        departmentId = 1\n    },\n    dataEventTransaction => {\n        Console.WriteLine(dataEventTransaction);\n    }\n);\n\n// This will cause the above DynamicViewSet to echo an INSERT data event\nawait database.InsertAndCommitAsync(&quot;employee&quot;, values: new {\n    department_id: 1\n    name: &quot;Mr Crabs&quot;\n});\n\n// This will NOT cause the above DynamicViewSet to echo an INSERT data event\n// (because the department_id doesn&apos;t match)\nawait database.InsertAndCommitAsync(&quot;employee&quot;, values: new {\n    department_id: 2\n    name: &quot;Patrick Star&quot;\n});</code></pre>\n"
  syntax:
    content: public interface IDatabase
    content.vb: Public Interface IDatabase
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Butterfly.Core.Database.IDatabase.CanJoin
  commentId: P:Butterfly.Core.Database.IDatabase.CanJoin
  id: CanJoin
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: CanJoin
  nameWithType: IDatabase.CanJoin
  fullName: Butterfly.Core.Database.IDatabase.CanJoin
  type: Property
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: CanJoin
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 81
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nCan this database perform JOINs\n"
  example: []
  syntax:
    content: bool CanJoin { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property CanJoin As Boolean
  overload: Butterfly.Core.Database.IDatabase.CanJoin*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Butterfly.Core.Database.IDatabase.CanFieldAlias
  commentId: P:Butterfly.Core.Database.IDatabase.CanFieldAlias
  id: CanFieldAlias
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: CanFieldAlias
  nameWithType: IDatabase.CanFieldAlias
  fullName: Butterfly.Core.Database.IDatabase.CanFieldAlias
  type: Property
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: CanFieldAlias
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 86
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nCan this database allow field aliases in SELECT statements\n"
  example: []
  syntax:
    content: bool CanFieldAlias { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property CanFieldAlias As Boolean
  overload: Butterfly.Core.Database.IDatabase.CanFieldAlias*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Butterfly.Core.Database.IDatabase.SelectCount
  commentId: P:Butterfly.Core.Database.IDatabase.SelectCount
  id: SelectCount
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: SelectCount
  nameWithType: IDatabase.SelectCount
  fullName: Butterfly.Core.Database.IDatabase.SelectCount
  type: Property
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: SelectCount
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 91
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nCount of the number of SELECT statements executed\n"
  example: []
  syntax:
    content: int SelectCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property SelectCount As Integer
  overload: Butterfly.Core.Database.IDatabase.SelectCount*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Butterfly.Core.Database.IDatabase.TableByName
  commentId: P:Butterfly.Core.Database.IDatabase.TableByName
  id: TableByName
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: TableByName
  nameWithType: IDatabase.TableByName
  fullName: Butterfly.Core.Database.IDatabase.TableByName
  type: Property
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: TableByName
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 96
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nDictionary of <xref href=\"Butterfly.Core.Database.Table\" data-throw-if-not-resolved=\"false\"></xref> instances keyed by name\n"
  example: []
  syntax:
    content: Dictionary<string, Table> TableByName { get; }
    parameters: []
    return:
      type: Dictionary{System.String,Butterfly.Core.Database.Table}
    content.vb: ReadOnly Property TableByName As Dictionary(Of String, Table)
  overload: Butterfly.Core.Database.IDatabase.TableByName*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Butterfly.Core.Database.IDatabase.CreateFromResourceFileAsync(Assembly,System.String)
  commentId: M:Butterfly.Core.Database.IDatabase.CreateFromResourceFileAsync(Assembly,System.String)
  id: CreateFromResourceFileAsync(Assembly,System.String)
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: CreateFromResourceFileAsync(Assembly, String)
  nameWithType: IDatabase.CreateFromResourceFileAsync(Assembly, String)
  fullName: Butterfly.Core.Database.IDatabase.CreateFromResourceFileAsync(Assembly, System.String)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: CreateFromResourceFileAsync
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 104
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nCreates database tables from an embedded resource file by internally calling <xref href=\"Butterfly.Core.Database.IDatabase.CreateFromSqlAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> with the contents of the embedded resource file&quot;\n"
  example: []
  syntax:
    content: Task CreateFromResourceFileAsync(Assembly assembly, string resourceFile)
    parameters:
    - id: assembly
      type: Assembly
      description: ''
    - id: resourceFile
      type: System.String
      description: ''
    return:
      type: Task
      description: ''
    content.vb: Function CreateFromResourceFileAsync(assembly As Assembly, resourceFile As String) As Task
  overload: Butterfly.Core.Database.IDatabase.CreateFromResourceFileAsync*
- uid: Butterfly.Core.Database.IDatabase.CreateFromSqlAsync(System.String)
  commentId: M:Butterfly.Core.Database.IDatabase.CreateFromSqlAsync(System.String)
  id: CreateFromSqlAsync(System.String)
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: CreateFromSqlAsync(String)
  nameWithType: IDatabase.CreateFromSqlAsync(String)
  fullName: Butterfly.Core.Database.IDatabase.CreateFromSqlAsync(System.String)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: CreateFromSqlAsync
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 112
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nCreates database tables from a string containing a semicolon delimited series of CREATE statements in MySQL format (will be converted to native database format as appropriate).<p></p>\nLines beginning with <pre><code>--</code></pre> will be ignored. Each CREATE statement must include a PRIMARY KEY definition. If the table already exists, the CREATE statement is ignored.<p></p>\nCreating database tables with this method is not required (primarily done as a convenience method for unit testing)&quot;/>.\n"
  example: []
  syntax:
    content: Task CreateFromSqlAsync(string sql)
    parameters:
    - id: sql
      type: System.String
      description: ''
    return:
      type: Task
    content.vb: Function CreateFromSqlAsync(sql As String) As Task
  overload: Butterfly.Core.Database.IDatabase.CreateFromSqlAsync*
- uid: Butterfly.Core.Database.IDatabase.OnNewUncommittedTransaction(Action{Butterfly.Core.Database.Event.DataEventTransaction})
  commentId: M:Butterfly.Core.Database.IDatabase.OnNewUncommittedTransaction(Action{Butterfly.Core.Database.Event.DataEventTransaction})
  id: OnNewUncommittedTransaction(Action{Butterfly.Core.Database.Event.DataEventTransaction})
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: OnNewUncommittedTransaction(Action<DataEventTransaction>)
  nameWithType: IDatabase.OnNewUncommittedTransaction(Action<DataEventTransaction>)
  fullName: Butterfly.Core.Database.IDatabase.OnNewUncommittedTransaction(Action<Butterfly.Core.Database.Event.DataEventTransaction>)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: OnNewUncommittedTransaction
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 119
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nAdds a listener that is invoked when there is a new uncommitted transaction\n"
  example: []
  syntax:
    content: IDisposable OnNewUncommittedTransaction(Action<DataEventTransaction> listener)
    parameters:
    - id: listener
      type: Action{Butterfly.Core.Database.Event.DataEventTransaction}
      description: The lambda to call when there is a new uncommitted <xref href="Butterfly.Core.Database.Event.DataEventTransaction" data-throw-if-not-resolved="false"></xref>
    return:
      type: IDisposable
      description: An <see cref="!:IDisposable"></see> that allows removing the listener by calling Dispose()
    content.vb: Function OnNewUncommittedTransaction(listener As Action(Of DataEventTransaction)) As IDisposable
  overload: Butterfly.Core.Database.IDatabase.OnNewUncommittedTransaction*
  nameWithType.vb: IDatabase.OnNewUncommittedTransaction(Action(Of DataEventTransaction))
  fullName.vb: Butterfly.Core.Database.IDatabase.OnNewUncommittedTransaction(Action(Of Butterfly.Core.Database.Event.DataEventTransaction))
  name.vb: OnNewUncommittedTransaction(Action(Of DataEventTransaction))
- uid: Butterfly.Core.Database.IDatabase.OnNewUncommittedTransaction(Func{Butterfly.Core.Database.Event.DataEventTransaction,Task})
  commentId: M:Butterfly.Core.Database.IDatabase.OnNewUncommittedTransaction(Func{Butterfly.Core.Database.Event.DataEventTransaction,Task})
  id: OnNewUncommittedTransaction(Func{Butterfly.Core.Database.Event.DataEventTransaction,Task})
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: OnNewUncommittedTransaction(Func<DataEventTransaction, Task>)
  nameWithType: IDatabase.OnNewUncommittedTransaction(Func<DataEventTransaction, Task>)
  fullName: Butterfly.Core.Database.IDatabase.OnNewUncommittedTransaction(Func<Butterfly.Core.Database.Event.DataEventTransaction, Task>)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: OnNewUncommittedTransaction
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 122
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  example: []
  syntax:
    content: IDisposable OnNewUncommittedTransaction(Func<DataEventTransaction, Task> listener)
    parameters:
    - id: listener
      type: Func{Butterfly.Core.Database.Event.DataEventTransaction,Task}
    return:
      type: IDisposable
    content.vb: Function OnNewUncommittedTransaction(listener As Func(Of DataEventTransaction, Task)) As IDisposable
  overload: Butterfly.Core.Database.IDatabase.OnNewUncommittedTransaction*
  nameWithType.vb: IDatabase.OnNewUncommittedTransaction(Func(Of DataEventTransaction, Task))
  fullName.vb: Butterfly.Core.Database.IDatabase.OnNewUncommittedTransaction(Func(Of Butterfly.Core.Database.Event.DataEventTransaction, Task))
  name.vb: OnNewUncommittedTransaction(Func(Of DataEventTransaction, Task))
- uid: Butterfly.Core.Database.IDatabase.OnNewCommittedTransaction(Action{Butterfly.Core.Database.Event.DataEventTransaction})
  commentId: M:Butterfly.Core.Database.IDatabase.OnNewCommittedTransaction(Action{Butterfly.Core.Database.Event.DataEventTransaction})
  id: OnNewCommittedTransaction(Action{Butterfly.Core.Database.Event.DataEventTransaction})
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: OnNewCommittedTransaction(Action<DataEventTransaction>)
  nameWithType: IDatabase.OnNewCommittedTransaction(Action<DataEventTransaction>)
  fullName: Butterfly.Core.Database.IDatabase.OnNewCommittedTransaction(Action<Butterfly.Core.Database.Event.DataEventTransaction>)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: OnNewCommittedTransaction
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 129
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nAdds a listener that is invoked when there is a new committed transaction\n"
  example: []
  syntax:
    content: IDisposable OnNewCommittedTransaction(Action<DataEventTransaction> listener)
    parameters:
    - id: listener
      type: Action{Butterfly.Core.Database.Event.DataEventTransaction}
      description: The lambda to call when there is a new committed <xref href="Butterfly.Core.Database.Event.DataEventTransaction" data-throw-if-not-resolved="false"></xref>
    return:
      type: IDisposable
      description: An <see cref="!:IDisposable"></see> that allows removing the listener by calling Dispose()
    content.vb: Function OnNewCommittedTransaction(listener As Action(Of DataEventTransaction)) As IDisposable
  overload: Butterfly.Core.Database.IDatabase.OnNewCommittedTransaction*
  nameWithType.vb: IDatabase.OnNewCommittedTransaction(Action(Of DataEventTransaction))
  fullName.vb: Butterfly.Core.Database.IDatabase.OnNewCommittedTransaction(Action(Of Butterfly.Core.Database.Event.DataEventTransaction))
  name.vb: OnNewCommittedTransaction(Action(Of DataEventTransaction))
- uid: Butterfly.Core.Database.IDatabase.OnNewCommittedTransaction(Func{Butterfly.Core.Database.Event.DataEventTransaction,Task})
  commentId: M:Butterfly.Core.Database.IDatabase.OnNewCommittedTransaction(Func{Butterfly.Core.Database.Event.DataEventTransaction,Task})
  id: OnNewCommittedTransaction(Func{Butterfly.Core.Database.Event.DataEventTransaction,Task})
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: OnNewCommittedTransaction(Func<DataEventTransaction, Task>)
  nameWithType: IDatabase.OnNewCommittedTransaction(Func<DataEventTransaction, Task>)
  fullName: Butterfly.Core.Database.IDatabase.OnNewCommittedTransaction(Func<Butterfly.Core.Database.Event.DataEventTransaction, Task>)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: OnNewCommittedTransaction
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 132
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  example: []
  syntax:
    content: IDisposable OnNewCommittedTransaction(Func<DataEventTransaction, Task> listener)
    parameters:
    - id: listener
      type: Func{Butterfly.Core.Database.Event.DataEventTransaction,Task}
    return:
      type: IDisposable
    content.vb: Function OnNewCommittedTransaction(listener As Func(Of DataEventTransaction, Task)) As IDisposable
  overload: Butterfly.Core.Database.IDatabase.OnNewCommittedTransaction*
  nameWithType.vb: IDatabase.OnNewCommittedTransaction(Func(Of DataEventTransaction, Task))
  fullName.vb: Butterfly.Core.Database.IDatabase.OnNewCommittedTransaction(Func(Of Butterfly.Core.Database.Event.DataEventTransaction, Task))
  name.vb: OnNewCommittedTransaction(Func(Of DataEventTransaction, Task))
- uid: Butterfly.Core.Database.IDatabase.SelectValueAsync``1(System.String,System.Object,``0)
  commentId: M:Butterfly.Core.Database.IDatabase.SelectValueAsync``1(System.String,System.Object,``0)
  id: SelectValueAsync``1(System.String,System.Object,``0)
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: SelectValueAsync<T>(String, Object, T)
  nameWithType: IDatabase.SelectValueAsync<T>(String, Object, T)
  fullName: Butterfly.Core.Database.IDatabase.SelectValueAsync<T>(System.String, System.Object, T)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: SelectValueAsync
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 146
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nExecutes the SELECT statement and return the value of the first column of the first row (the SELECT statement may contain vars like @name specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">vars</code>).<p></p>\n<p></p>\nIf a var is null then references in the WHERE clause like <pre><code>name=@name</code></pre> will be rewritten as <pre><code>name IS NULL</code></pre> and references in the WHERE clause like <pre><code>name!=@name</code></pre> will be rewritten as <pre><code>name IS NOT NULL</code></pre>.<p></p>\n<p></p>\nIf a var is an array then references in the WHERE clause like <pre><code>name=@name</code></pre> will be rewritten as <pre><code>1=2</code></pre> when the array is empty, rewritten as <pre><code>name=&apos;Bob&apos;</code></pre> when the array contains a single element &apos;Bob&apos;, and rewritten as <pre><code>name IN (&apos;Bob&apos;, &apos;Jim&apos;)</code></pre> when the array contains elements &apos;Bob&apos; and &apos;Jim&apos;.<p></p>\n"
  example: []
  syntax:
    content: Task<T> SelectValueAsync<T>(string sql, dynamic vars = null, T defaultValue = null)
    parameters:
    - id: sql
      type: System.String
      description: The SELECT statement to execute (may contain vars like @name specified in <code data-dev-comment-type="paramref" class="paramref">vars</code>)
    - id: vars
      type: System.Object
      description: Either an anonymous type or Dictionary with the vars used in the SELECT statement
    - id: defaultValue
      type: '{T}'
      description: The value to return if no rows were returned or the value of the first column of the first row is null
    typeParameters:
    - id: T
      description: The return type of the single value returned
    return:
      type: Task{{T}}
      description: The value of the first column of the first row
    content.vb: Function SelectValueAsync(Of T)(sql As String, vars As Object = Nothing, defaultValue As T = Nothing) As Task(Of T)
  overload: Butterfly.Core.Database.IDatabase.SelectValueAsync*
  nameWithType.vb: IDatabase.SelectValueAsync(Of T)(String, Object, T)
  fullName.vb: Butterfly.Core.Database.IDatabase.SelectValueAsync(Of T)(System.String, System.Object, T)
  name.vb: SelectValueAsync(Of T)(String, Object, T)
- uid: Butterfly.Core.Database.IDatabase.SelectValuesAsync``1(System.String,System.Object)
  commentId: M:Butterfly.Core.Database.IDatabase.SelectValuesAsync``1(System.String,System.Object)
  id: SelectValuesAsync``1(System.String,System.Object)
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: SelectValuesAsync<T>(String, Object)
  nameWithType: IDatabase.SelectValuesAsync<T>(String, Object)
  fullName: Butterfly.Core.Database.IDatabase.SelectValuesAsync<T>(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: SelectValuesAsync
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 159
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nExecutes the SELECT statement and return the value of the first column of the first row (the SELECT statement may contain vars like @name specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">vars</code>).<p></p>\n<p></p>\nIf a var is null then references in the WHERE clause like <pre><code>name=@name</code></pre> will be rewritten as <pre><code>name IS NULL</code></pre> and references in the WHERE clause like <pre><code>name!=@name</code></pre> will be rewritten as <pre><code>name IS NOT NULL</code></pre>.<p></p>\n<p></p>\nIf a var is an array then references in the WHERE clause like <pre><code>name=@name</code></pre> will be rewritten as <pre><code>1=2</code></pre> when the array is empty, rewritten as <pre><code>name=&apos;Bob&apos;</code></pre> when the array contains a single element &apos;Bob&apos;, and rewritten as <pre><code>name IN (&apos;Bob&apos;, &apos;Jim&apos;)</code></pre> when the array contains elements &apos;Bob&apos; and &apos;Jim&apos;.<p></p>\n"
  example: []
  syntax:
    content: Task<T[]> SelectValuesAsync<T>(string sql, dynamic vars = null)
    parameters:
    - id: sql
      type: System.String
      description: The SELECT statement to execute (may contain vars like @name specified in <code data-dev-comment-type="paramref" class="paramref">vars</code>)
    - id: vars
      type: System.Object
      description: Either an anonymous type or Dictionary with the vars used in the SELECT statement
    typeParameters:
    - id: T
      description: The return type of the single value returned
    return:
      type: Task{{T}[]}
      description: The value of the first column of the first row
    content.vb: Function SelectValuesAsync(Of T)(sql As String, vars As Object = Nothing) As Task(Of T())
  overload: Butterfly.Core.Database.IDatabase.SelectValuesAsync*
  nameWithType.vb: IDatabase.SelectValuesAsync(Of T)(String, Object)
  fullName.vb: Butterfly.Core.Database.IDatabase.SelectValuesAsync(Of T)(System.String, System.Object)
  name.vb: SelectValuesAsync(Of T)(String, Object)
- uid: Butterfly.Core.Database.IDatabase.SelectRowAsync(System.String,System.Object)
  commentId: M:Butterfly.Core.Database.IDatabase.SelectRowAsync(System.String,System.Object)
  id: SelectRowAsync(System.String,System.Object)
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: SelectRowAsync(String, Object)
  nameWithType: IDatabase.SelectRowAsync(String, Object)
  fullName: Butterfly.Core.Database.IDatabase.SelectRowAsync(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: SelectRowAsync
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 167
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nExecutes the SELECT statement and return the first row (the SELECT statement may contain vars like @name specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">vars</code>)\n"
  example: []
  syntax:
    content: Task<System.Collections.Generic.Dictionary<string, object>> SelectRowAsync(string sql, dynamic vars = null)
    parameters:
    - id: sql
      type: System.String
      description: The SELECT statement to execute (may contain vars like @name specified in <code data-dev-comment-type="paramref" class="paramref">vars</code>)
    - id: vars
      type: System.Object
      description: ''
    return:
      type: Task{System.Collections.Generic.Dictionary{System.String,System.Object}}
      description: ''
    content.vb: Function SelectRowAsync(sql As String, vars As Object = Nothing) As Task(Of System.Collections.Generic.Dictionary(Of String, Object))
  overload: Butterfly.Core.Database.IDatabase.SelectRowAsync*
- uid: Butterfly.Core.Database.IDatabase.SelectRowsAsync(System.String,System.Object)
  commentId: M:Butterfly.Core.Database.IDatabase.SelectRowsAsync(System.String,System.Object)
  id: SelectRowsAsync(System.String,System.Object)
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: SelectRowsAsync(String, Object)
  nameWithType: IDatabase.SelectRowsAsync(String, Object)
  fullName: Butterfly.Core.Database.IDatabase.SelectRowsAsync(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: SelectRowsAsync
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 175
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nExecutes the SELECT statement and return the rows (the SELECT statement may contain vars like @name specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">vars</code>)\n"
  example: []
  syntax:
    content: Task<System.Collections.Generic.Dictionary<string, object>[]> SelectRowsAsync(string sql, dynamic vars = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: vars
      type: System.Object
      description: ''
    return:
      type: Task{System.Collections.Generic.Dictionary{System.String,System.Object}[]}
      description: ''
    content.vb: Function SelectRowsAsync(sql As String, vars As Object = Nothing) As Task(Of System.Collections.Generic.Dictionary(Of String, Object)())
  overload: Butterfly.Core.Database.IDatabase.SelectRowsAsync*
- uid: Butterfly.Core.Database.IDatabase.SelectRowsAsync(Butterfly.Core.Database.SelectStatement,System.Object)
  commentId: M:Butterfly.Core.Database.IDatabase.SelectRowsAsync(Butterfly.Core.Database.SelectStatement,System.Object)
  id: SelectRowsAsync(Butterfly.Core.Database.SelectStatement,System.Object)
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: SelectRowsAsync(SelectStatement, Object)
  nameWithType: IDatabase.SelectRowsAsync(SelectStatement, Object)
  fullName: Butterfly.Core.Database.IDatabase.SelectRowsAsync(Butterfly.Core.Database.SelectStatement, System.Object)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: SelectRowsAsync
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 183
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nExecutes the SELECT statement and returns the rows\n"
  example: []
  syntax:
    content: Task<System.Collections.Generic.Dictionary<string, object>[]> SelectRowsAsync(SelectStatement statement, dynamic vars)
    parameters:
    - id: statement
      type: Butterfly.Core.Database.SelectStatement
      description: ''
    - id: vars
      type: System.Object
      description: ''
    return:
      type: Task{System.Collections.Generic.Dictionary{System.String,System.Object}[]}
      description: ''
    content.vb: Function SelectRowsAsync(statement As SelectStatement, vars As Object) As Task(Of System.Collections.Generic.Dictionary(Of String, Object)())
  overload: Butterfly.Core.Database.IDatabase.SelectRowsAsync*
- uid: Butterfly.Core.Database.IDatabase.QueryValueAsync``1(System.String,System.Object,``0)
  commentId: M:Butterfly.Core.Database.IDatabase.QueryValueAsync``1(System.String,System.Object,``0)
  id: QueryValueAsync``1(System.String,System.Object,``0)
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: QueryValueAsync<T>(String, Object, T)
  nameWithType: IDatabase.QueryValueAsync<T>(String, Object, T)
  fullName: Butterfly.Core.Database.IDatabase.QueryValueAsync<T>(System.String, System.Object, T)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: QueryValueAsync
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 193
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nExecutes the stored procedure and return a single value\n"
  example: []
  syntax:
    content: Task<T> QueryValueAsync<T>(string storedProcedureName, dynamic vars = null, T defaultValue = null)
    parameters:
    - id: storedProcedureName
      type: System.String
      description: ''
    - id: vars
      type: System.Object
      description: ''
    - id: defaultValue
      type: '{T}'
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: Task{{T}}
      description: ''
    content.vb: Function QueryValueAsync(Of T)(storedProcedureName As String, vars As Object = Nothing, defaultValue As T = Nothing) As Task(Of T)
  overload: Butterfly.Core.Database.IDatabase.QueryValueAsync*
  nameWithType.vb: IDatabase.QueryValueAsync(Of T)(String, Object, T)
  fullName.vb: Butterfly.Core.Database.IDatabase.QueryValueAsync(Of T)(System.String, System.Object, T)
  name.vb: QueryValueAsync(Of T)(String, Object, T)
- uid: Butterfly.Core.Database.IDatabase.QueryRowAsync(System.String,System.Object)
  commentId: M:Butterfly.Core.Database.IDatabase.QueryRowAsync(System.String,System.Object)
  id: QueryRowAsync(System.String,System.Object)
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: QueryRowAsync(String, Object)
  nameWithType: IDatabase.QueryRowAsync(String, Object)
  fullName: Butterfly.Core.Database.IDatabase.QueryRowAsync(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: QueryRowAsync
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 201
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nExecutes the stored procedure and returns a single row\n"
  example: []
  syntax:
    content: Task<System.Collections.Generic.Dictionary<string, object>> QueryRowAsync(string storedProcedureName, dynamic vars = null)
    parameters:
    - id: storedProcedureName
      type: System.String
      description: ''
    - id: vars
      type: System.Object
      description: ''
    return:
      type: Task{System.Collections.Generic.Dictionary{System.String,System.Object}}
      description: ''
    content.vb: Function QueryRowAsync(storedProcedureName As String, vars As Object = Nothing) As Task(Of System.Collections.Generic.Dictionary(Of String, Object))
  overload: Butterfly.Core.Database.IDatabase.QueryRowAsync*
- uid: Butterfly.Core.Database.IDatabase.QueryRowsAsync(System.String,System.Object)
  commentId: M:Butterfly.Core.Database.IDatabase.QueryRowsAsync(System.String,System.Object)
  id: QueryRowsAsync(System.String,System.Object)
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: QueryRowsAsync(String, Object)
  nameWithType: IDatabase.QueryRowsAsync(String, Object)
  fullName: Butterfly.Core.Database.IDatabase.QueryRowsAsync(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: QueryRowsAsync
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 209
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nExecutes the stored procedure and returns the rows\n"
  example: []
  syntax:
    content: Task<System.Collections.Generic.Dictionary<string, object>[]> QueryRowsAsync(string storedProcedureName, dynamic vars = null)
    parameters:
    - id: storedProcedureName
      type: System.String
      description: ''
    - id: vars
      type: System.Object
      description: ''
    return:
      type: Task{System.Collections.Generic.Dictionary{System.String,System.Object}[]}
      description: ''
    content.vb: Function QueryRowsAsync(storedProcedureName As String, vars As Object = Nothing) As Task(Of System.Collections.Generic.Dictionary(Of String, Object)())
  overload: Butterfly.Core.Database.IDatabase.QueryRowsAsync*
- uid: Butterfly.Core.Database.IDatabase.InsertAndCommitAsync``1(System.String,System.Object,System.Boolean)
  commentId: M:Butterfly.Core.Database.IDatabase.InsertAndCommitAsync``1(System.String,System.Object,System.Boolean)
  id: InsertAndCommitAsync``1(System.String,System.Object,System.Boolean)
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: InsertAndCommitAsync<T>(String, Object, Boolean)
  nameWithType: IDatabase.InsertAndCommitAsync<T>(String, Object, Boolean)
  fullName: Butterfly.Core.Database.IDatabase.InsertAndCommitAsync<T>(System.String, System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: InsertAndCommitAsync
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 244
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nExecutes an INSERT statement as a single transaction\n"
  remarks: "\nDo an INSERT using the table name and an anonymous type...\n<pre><code>await database.InsertAndCommitAsync(&quot;message&quot;, new {\n    text = &quot;Hello&quot;,\n    owner_id = &quot;123&quot;,\n});</code></pre>\nDo an INSERT using a full statement and a Dictionary...\n<pre><code>await database.InsertAndCommitAsync(&quot;INSERT INTO message (text, owner_id) VALUES (@t, @oid)&quot;, new Dictionary&lt;string, object> {\n    [&quot;t&quot;] = &quot;Hello&quot;,\n    [&quot;oid&quot;] = &quot;123&quot;,\n});</code></pre>\n"
  example: []
  syntax:
    content: Task<T> InsertAndCommitAsync<T>(string insertStatement, dynamic vars = null, bool ignoreIfDuplicate = false)
    parameters:
    - id: insertStatement
      type: System.String
      description: "\nEither a table name or a full INSERT statement with vars prefixed by @ (like <pre><code>@name</code></pre>)\n"
    - id: vars
      type: System.Object
      description: "\nEither an anonymous type or a Dictionary. \nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">insertStatement</code> is a table name, the <code data-dev-comment-type=\"paramref\" class=\"paramref\">vars</code> values will be used to build the UPDATE statement.\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">insertStatement</code> is a full INSERT statement, there must be one entry for each var referenced in <code data-dev-comment-type=\"paramref\" class=\"paramref\">insertStatement</code>.\n"
    - id: ignoreIfDuplicate
      type: System.Boolean
      description: "\nIf the INSERT attempts to duplicate the primary key then either \nthrow an <xref href=\"Butterfly.Core.Database.DuplicateKeyDatabaseException\" data-throw-if-not-resolved=\"false\"></xref> error if <code data-dev-comment-type=\"paramref\" class=\"paramref\">ignoreIfDuplicate</code> is true\nor just ignore if <code data-dev-comment-type=\"paramref\" class=\"paramref\">ignoreIfDuplicate</code> is false\n"
    typeParameters:
    - id: T
    return:
      type: Task{{T}}
      description: Primary key value (semi-colon delimited string if multi-field primary key)
    content.vb: Function InsertAndCommitAsync(Of T)(insertStatement As String, vars As Object = Nothing, ignoreIfDuplicate As Boolean = False) As Task(Of T)
  overload: Butterfly.Core.Database.IDatabase.InsertAndCommitAsync*
  nameWithType.vb: IDatabase.InsertAndCommitAsync(Of T)(String, Object, Boolean)
  fullName.vb: Butterfly.Core.Database.IDatabase.InsertAndCommitAsync(Of T)(System.String, System.Object, System.Boolean)
  name.vb: InsertAndCommitAsync(Of T)(String, Object, Boolean)
- uid: Butterfly.Core.Database.IDatabase.UpdateAndCommitAsync(System.String,System.Object)
  commentId: M:Butterfly.Core.Database.IDatabase.UpdateAndCommitAsync(System.String,System.Object)
  id: UpdateAndCommitAsync(System.String,System.Object)
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: UpdateAndCommitAsync(String, Object)
  nameWithType: IDatabase.UpdateAndCommitAsync(String, Object)
  fullName: Butterfly.Core.Database.IDatabase.UpdateAndCommitAsync(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: UpdateAndCommitAsync
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 274
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nExecutes an UPDATE statement as a single transaction\n"
  remarks: "\nDo an UPDATE using the table name and an anonymous type...\n<pre><code>await database.UpdateAndCommitAsync(&quot;message&quot;, new {\n    id = 123,\n    text = &quot;Hello&quot;,\n});</code></pre>\nDo an UPDATE using a full statement and a Dictionary...\n<pre><code>await database.UpdateAndCommitAsync(&quot;UPDATE message SET text=@t WHERE id=@id&quot;, new Dictionary&lt;string, object> {\n    [&quot;id&quot;] = 123,\n    [&quot;t&quot;] = &quot;Hello&quot;,\n});</code></pre>\n"
  example: []
  syntax:
    content: Task<int> UpdateAndCommitAsync(string updateStatement, dynamic vars)
    parameters:
    - id: updateStatement
      type: System.String
      description: "\nEither a table name or a full UPDATE statement with vars prefixed by @ (like <pre><code>@name</code></pre>)\n"
    - id: vars
      type: System.Object
      description: "\nEither an anonymous type or a Dictionary. \nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">updateStatement</code> is a table name, the <code data-dev-comment-type=\"paramref\" class=\"paramref\">vars</code> values will be used to build the SET clause and WHERE clause of the UPDATE statement.\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">updateStatement</code> is a full UPDATE statement, there must be one entry for each var referenced in <code data-dev-comment-type=\"paramref\" class=\"paramref\">updateStatement</code>.\n"
    return:
      type: Task{System.Int32}
      description: Number of records updated
    content.vb: Function UpdateAndCommitAsync(updateStatement As String, vars As Object) As Task(Of Integer)
  overload: Butterfly.Core.Database.IDatabase.UpdateAndCommitAsync*
- uid: Butterfly.Core.Database.IDatabase.DeleteAndCommitAsync(System.String,System.Object)
  commentId: M:Butterfly.Core.Database.IDatabase.DeleteAndCommitAsync(System.String,System.Object)
  id: DeleteAndCommitAsync(System.String,System.Object)
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: DeleteAndCommitAsync(String, Object)
  nameWithType: IDatabase.DeleteAndCommitAsync(String, Object)
  fullName: Butterfly.Core.Database.IDatabase.DeleteAndCommitAsync(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: DeleteAndCommitAsync
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 302
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nExecutes a DELETE statement as a single transaction\n"
  remarks: "\nDo a DELETE using the table name and an anonymous type...\n<pre><code>await database.DeleteAndCommitAsync(&quot;message&quot;, new {\n    id = 123\n});</code></pre>\nDo a DELETE using a full statement and a Dictionary...\n<pre><code>await database.DeleteAndCommitAsync(&quot;DELETE FROM message WHERE id=@id&quot;, new Dictionary&lt;string, object> {\n    [&quot;id&quot;] = 123\n});</code></pre>\n"
  example: []
  syntax:
    content: Task<int> DeleteAndCommitAsync(string deleteStatement, dynamic vars)
    parameters:
    - id: deleteStatement
      type: System.String
      description: "\nEither a table name or a full DELETE statement with vars prefixed by @ (like <pre><code>@name</code></pre>)\n"
    - id: vars
      type: System.Object
      description: "\nEither an anonymous type or a Dictionary. \nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">deleteStatement</code> is a table name, the <code data-dev-comment-type=\"paramref\" class=\"paramref\">vars</code> values will be used to build the WHERE clause of the DELETE statement.\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">deleteStatement</code> is a full DELETE statement, there must be one entry for each var referenced in <code data-dev-comment-type=\"paramref\" class=\"paramref\">deleteStatement</code>.\n"
    return:
      type: Task{System.Int32}
      description: Number of records deleted
    content.vb: Function DeleteAndCommitAsync(deleteStatement As String, vars As Object) As Task(Of Integer)
  overload: Butterfly.Core.Database.IDatabase.DeleteAndCommitAsync*
- uid: Butterfly.Core.Database.IDatabase.BeginTransaction
  commentId: M:Butterfly.Core.Database.IDatabase.BeginTransaction
  id: BeginTransaction
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: BeginTransaction()
  nameWithType: IDatabase.BeginTransaction()
  fullName: Butterfly.Core.Database.IDatabase.BeginTransaction()
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: BeginTransaction
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 308
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nCreates a new <xref href=\"Butterfly.Core.Database.ITransaction\" data-throw-if-not-resolved=\"false\"></xref> instance.  An <xref href=\"Butterfly.Core.Database.ITransaction\" data-throw-if-not-resolved=\"false\"></xref> instance allows performing an atomic set of modifications to the database.  Must execute <xref href=\"Butterfly.Core.Database.ITransaction.CommitAsync\" data-throw-if-not-resolved=\"false\"></xref> to save the transaction changes.  Disposing the transaction without committing rolls back the changes.\n"
  example: []
  syntax:
    content: ITransaction BeginTransaction()
    return:
      type: Butterfly.Core.Database.ITransaction
      description: An <xref href="Butterfly.Core.Database.ITransaction" data-throw-if-not-resolved="false"></xref> instance (can then call InsertAsync(), UpdateAsync(), or DeleteAsync() on the ITransaction instance to make changes on the transaction)/>
    content.vb: Function BeginTransaction As ITransaction
  overload: Butterfly.Core.Database.IDatabase.BeginTransaction*
- uid: Butterfly.Core.Database.IDatabase.BeginTransactionAsync
  commentId: M:Butterfly.Core.Database.IDatabase.BeginTransactionAsync
  id: BeginTransactionAsync
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: BeginTransactionAsync()
  nameWithType: IDatabase.BeginTransactionAsync()
  fullName: Butterfly.Core.Database.IDatabase.BeginTransactionAsync()
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: BeginTransactionAsync
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 311
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  example: []
  syntax:
    content: Task<ITransaction> BeginTransactionAsync()
    return:
      type: Task{Butterfly.Core.Database.ITransaction}
    content.vb: Function BeginTransactionAsync As Task(Of ITransaction)
  overload: Butterfly.Core.Database.IDatabase.BeginTransactionAsync*
- uid: Butterfly.Core.Database.IDatabase.SetDefaultValue(System.String,Func{System.String,System.Object},System.String)
  commentId: M:Butterfly.Core.Database.IDatabase.SetDefaultValue(System.String,Func{System.String,System.Object},System.String)
  id: SetDefaultValue(System.String,Func{System.String,System.Object},System.String)
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: SetDefaultValue(String, Func<String, Object>, String)
  nameWithType: IDatabase.SetDefaultValue(String, Func<String, Object>, String)
  fullName: Butterfly.Core.Database.IDatabase.SetDefaultValue(System.String, Func<System.String, System.Object>, System.String)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: SetDefaultValue
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 319
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nAllows specifying a lambda that creates a default value for a field when executing an INSERT.  If <code data-dev-comment-type=\"paramref\" class=\"paramref\">tableName</code> is null, the <code data-dev-comment-type=\"paramref\" class=\"paramref\">getValue</code> lambda will be applied to all tables.\n"
  example: []
  syntax:
    content: void SetDefaultValue(string fieldName, Func<string, object> getValue, string tableName = null)
    parameters:
    - id: fieldName
      type: System.String
      description: Name of the field
    - id: getValue
      type: Func{System.String,System.Object}
      description: The lambda that returns the default value
    - id: tableName
      type: System.String
      description: An optional table name.  If not null, the getValue lambda is only applied to the specified table. If null, the getValue lambda is applied to all tables.
    content.vb: Sub SetDefaultValue(fieldName As String, getValue As Func(Of String, Object), tableName As String = Nothing)
  overload: Butterfly.Core.Database.IDatabase.SetDefaultValue*
  nameWithType.vb: IDatabase.SetDefaultValue(String, Func(Of String, Object), String)
  fullName.vb: Butterfly.Core.Database.IDatabase.SetDefaultValue(System.String, Func(Of System.String, System.Object), System.String)
  name.vb: SetDefaultValue(String, Func(Of String, Object), String)
- uid: Butterfly.Core.Database.IDatabase.SetOverrideValue(System.String,Func{System.String,System.Object},System.String)
  commentId: M:Butterfly.Core.Database.IDatabase.SetOverrideValue(System.String,Func{System.String,System.Object},System.String)
  id: SetOverrideValue(System.String,Func{System.String,System.Object},System.String)
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: SetOverrideValue(String, Func<String, Object>, String)
  nameWithType: IDatabase.SetOverrideValue(String, Func<String, Object>, String)
  fullName: Butterfly.Core.Database.IDatabase.SetOverrideValue(System.String, Func<System.String, System.Object>, System.String)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: SetOverrideValue
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 327
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nAllows specifying a lambda that creates an override value for a field when executing both an INSERT and UPDATE.  If <code data-dev-comment-type=\"paramref\" class=\"paramref\">tableName</code> is null, the <code data-dev-comment-type=\"paramref\" class=\"paramref\">getValue</code> lambda will be applied to all tables.\n"
  example: []
  syntax:
    content: void SetOverrideValue(string fieldName, Func<string, object> getValue, string tableName = null)
    parameters:
    - id: fieldName
      type: System.String
      description: Name of the field
    - id: getValue
      type: Func{System.String,System.Object}
      description: The lambda that returns the default value
    - id: tableName
      type: System.String
      description: An optional table name.  If not null, the getValue lambda is only applied to the specified table. If null, the getValue lambda is applied to all tables.
    content.vb: Sub SetOverrideValue(fieldName As String, getValue As Func(Of String, Object), tableName As String = Nothing)
  overload: Butterfly.Core.Database.IDatabase.SetOverrideValue*
  nameWithType.vb: IDatabase.SetOverrideValue(String, Func(Of String, Object), String)
  fullName.vb: Butterfly.Core.Database.IDatabase.SetOverrideValue(System.String, Func(Of System.String, System.Object), System.String)
  name.vb: SetOverrideValue(String, Func(Of String, Object), String)
- uid: Butterfly.Core.Database.IDatabase.AddInputPreprocessor(Action{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}})
  commentId: M:Butterfly.Core.Database.IDatabase.AddInputPreprocessor(Action{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}})
  id: AddInputPreprocessor(Action{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}})
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: AddInputPreprocessor(Action<String, System.Collections.Generic.Dictionary<String, Object>>)
  nameWithType: IDatabase.AddInputPreprocessor(Action<String, System.Collections.Generic.Dictionary<String, Object>>)
  fullName: Butterfly.Core.Database.IDatabase.AddInputPreprocessor(Action<System.String, System.Collections.Generic.Dictionary<System.String, System.Object>>)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: AddInputPreprocessor
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 333
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nAdds an input preprocessor that converts the values in the Dictionary as needed\n"
  example: []
  syntax:
    content: void AddInputPreprocessor(Action<string, System.Collections.Generic.Dictionary<string, object>> inputPreprocessor)
    parameters:
    - id: inputPreprocessor
      type: Action{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}}
      description: ''
    content.vb: Sub AddInputPreprocessor(inputPreprocessor As Action(Of String, System.Collections.Generic.Dictionary(Of String, Object)))
  overload: Butterfly.Core.Database.IDatabase.AddInputPreprocessor*
  nameWithType.vb: IDatabase.AddInputPreprocessor(Action(Of String, System.Collections.Generic.Dictionary(Of String, Object)))
  fullName.vb: Butterfly.Core.Database.IDatabase.AddInputPreprocessor(Action(Of System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object)))
  name.vb: AddInputPreprocessor(Action(Of String, System.Collections.Generic.Dictionary(Of String, Object)))
- uid: Butterfly.Core.Database.IDatabase.CreateDynamicViewSet(Action{Butterfly.Core.Database.Event.DataEventTransaction})
  commentId: M:Butterfly.Core.Database.IDatabase.CreateDynamicViewSet(Action{Butterfly.Core.Database.Event.DataEventTransaction})
  id: CreateDynamicViewSet(Action{Butterfly.Core.Database.Event.DataEventTransaction})
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: CreateDynamicViewSet(Action<DataEventTransaction>)
  nameWithType: IDatabase.CreateDynamicViewSet(Action<DataEventTransaction>)
  fullName: Butterfly.Core.Database.IDatabase.CreateDynamicViewSet(Action<Butterfly.Core.Database.Event.DataEventTransaction>)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: CreateDynamicViewSet
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 340
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nAllows creating a set of <xref href=\"Butterfly.Core.Database.Dynamic.DynamicView\" data-throw-if-not-resolved=\"false\"></xref> instances that publish a single <xref href=\"Butterfly.Core.Database.Event.DataEventTransaction\" data-throw-if-not-resolved=\"false\"></xref> instance with initial data and new <xref href=\"Butterfly.Core.Database.Event.DataEventTransaction\" data-throw-if-not-resolved=\"false\"></xref> instances when data changes.  The <xref href=\"Butterfly.Core.Database.Event.DataEventTransaction\" data-throw-if-not-resolved=\"false\"></xref> instances are published to the lambda passed as the <code data-dev-comment-type=\"paramref\" class=\"paramref\">listener</code>.\n"
  example: []
  syntax:
    content: DynamicViewSet CreateDynamicViewSet(Action<DataEventTransaction> listener)
    parameters:
    - id: listener
      type: Action{Butterfly.Core.Database.Event.DataEventTransaction}
      description: The lambda that should receive the <xref href="Butterfly.Core.Database.Event.DataEventTransaction" data-throw-if-not-resolved="false"></xref> instances
    return:
      type: Butterfly.Core.Database.Dynamic.DynamicViewSet
      description: A <xref href="Butterfly.Core.Database.Dynamic.DynamicViewSet" data-throw-if-not-resolved="false"></xref> that can be disposed to remove all database listners
    content.vb: Function CreateDynamicViewSet(listener As Action(Of DataEventTransaction)) As DynamicViewSet
  overload: Butterfly.Core.Database.IDatabase.CreateDynamicViewSet*
  nameWithType.vb: IDatabase.CreateDynamicViewSet(Action(Of DataEventTransaction))
  fullName.vb: Butterfly.Core.Database.IDatabase.CreateDynamicViewSet(Action(Of Butterfly.Core.Database.Event.DataEventTransaction))
  name.vb: CreateDynamicViewSet(Action(Of DataEventTransaction))
- uid: Butterfly.Core.Database.IDatabase.CreateDynamicViewSet(Func{Butterfly.Core.Database.Event.DataEventTransaction,Task})
  commentId: M:Butterfly.Core.Database.IDatabase.CreateDynamicViewSet(Func{Butterfly.Core.Database.Event.DataEventTransaction,Task})
  id: CreateDynamicViewSet(Func{Butterfly.Core.Database.Event.DataEventTransaction,Task})
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: CreateDynamicViewSet(Func<DataEventTransaction, Task>)
  nameWithType: IDatabase.CreateDynamicViewSet(Func<DataEventTransaction, Task>)
  fullName: Butterfly.Core.Database.IDatabase.CreateDynamicViewSet(Func<Butterfly.Core.Database.Event.DataEventTransaction, Task>)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: CreateDynamicViewSet
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 343
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  example: []
  syntax:
    content: DynamicViewSet CreateDynamicViewSet(Func<DataEventTransaction, Task> listener)
    parameters:
    - id: listener
      type: Func{Butterfly.Core.Database.Event.DataEventTransaction,Task}
    return:
      type: Butterfly.Core.Database.Dynamic.DynamicViewSet
    content.vb: Function CreateDynamicViewSet(listener As Func(Of DataEventTransaction, Task)) As DynamicViewSet
  overload: Butterfly.Core.Database.IDatabase.CreateDynamicViewSet*
  nameWithType.vb: IDatabase.CreateDynamicViewSet(Func(Of DataEventTransaction, Task))
  fullName.vb: Butterfly.Core.Database.IDatabase.CreateDynamicViewSet(Func(Of Butterfly.Core.Database.Event.DataEventTransaction, Task))
  name.vb: CreateDynamicViewSet(Func(Of DataEventTransaction, Task))
- uid: Butterfly.Core.Database.IDatabase.CreateAndStartDynamicViewAsync(System.String,Action{Butterfly.Core.Database.Event.DataEventTransaction},System.Object,System.String,System.String[])
  commentId: M:Butterfly.Core.Database.IDatabase.CreateAndStartDynamicViewAsync(System.String,Action{Butterfly.Core.Database.Event.DataEventTransaction},System.Object,System.String,System.String[])
  id: CreateAndStartDynamicViewAsync(System.String,Action{Butterfly.Core.Database.Event.DataEventTransaction},System.Object,System.String,System.String[])
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: CreateAndStartDynamicViewAsync(String, Action<DataEventTransaction>, Object, String, String[])
  nameWithType: IDatabase.CreateAndStartDynamicViewAsync(String, Action<DataEventTransaction>, Object, String, String[])
  fullName: Butterfly.Core.Database.IDatabase.CreateAndStartDynamicViewAsync(System.String, Action<Butterfly.Core.Database.Event.DataEventTransaction>, System.Object, System.String, System.String[])
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: CreateAndStartDynamicViewAsync
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 354
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nConvenience method which creates a <xref href=\"Butterfly.Core.Database.Dynamic.DynamicViewSet\" data-throw-if-not-resolved=\"false\"></xref>, adds a single <xref href=\"Butterfly.Core.Database.Dynamic.DynamicView\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"Butterfly.Core.Database.Dynamic.DynamicViewSet\" data-throw-if-not-resolved=\"false\"></xref>, and starts the <xref href=\"Butterfly.Core.Database.Dynamic.DynamicViewSet\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: Task<DynamicViewSet> CreateAndStartDynamicViewAsync(string sql, Action<DataEventTransaction> listener, dynamic values = null, string name = null, string[] keyFieldNames = null)
    parameters:
    - id: sql
      type: System.String
      description: ''
    - id: listener
      type: Action{Butterfly.Core.Database.Event.DataEventTransaction}
      description: ''
    - id: values
      type: System.Object
      description: ''
    - id: name
      type: System.String
      description: ''
    - id: keyFieldNames
      type: System.String[]
      description: ''
    return:
      type: Task{Butterfly.Core.Database.Dynamic.DynamicViewSet}
      description: ''
    content.vb: Function CreateAndStartDynamicViewAsync(sql As String, listener As Action(Of DataEventTransaction), values As Object = Nothing, name As String = Nothing, keyFieldNames As String() = Nothing) As Task(Of DynamicViewSet)
  overload: Butterfly.Core.Database.IDatabase.CreateAndStartDynamicViewAsync*
  nameWithType.vb: IDatabase.CreateAndStartDynamicViewAsync(String, Action(Of DataEventTransaction), Object, String, String())
  fullName.vb: Butterfly.Core.Database.IDatabase.CreateAndStartDynamicViewAsync(System.String, Action(Of Butterfly.Core.Database.Event.DataEventTransaction), System.Object, System.String, System.String())
  name.vb: CreateAndStartDynamicViewAsync(String, Action(Of DataEventTransaction), Object, String, String())
- uid: Butterfly.Core.Database.IDatabase.CreateAndStartDynamicViewAsync(System.String,Func{Butterfly.Core.Database.Event.DataEventTransaction,Task},System.Object,System.String,System.String[])
  commentId: M:Butterfly.Core.Database.IDatabase.CreateAndStartDynamicViewAsync(System.String,Func{Butterfly.Core.Database.Event.DataEventTransaction,Task},System.Object,System.String,System.String[])
  id: CreateAndStartDynamicViewAsync(System.String,Func{Butterfly.Core.Database.Event.DataEventTransaction,Task},System.Object,System.String,System.String[])
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: CreateAndStartDynamicViewAsync(String, Func<DataEventTransaction, Task>, Object, String, String[])
  nameWithType: IDatabase.CreateAndStartDynamicViewAsync(String, Func<DataEventTransaction, Task>, Object, String, String[])
  fullName: Butterfly.Core.Database.IDatabase.CreateAndStartDynamicViewAsync(System.String, Func<Butterfly.Core.Database.Event.DataEventTransaction, Task>, System.Object, System.String, System.String[])
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: CreateAndStartDynamicViewAsync
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 357
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  example: []
  syntax:
    content: Task<DynamicViewSet> CreateAndStartDynamicViewAsync(string sql, Func<DataEventTransaction, Task> listener, dynamic values = null, string name = null, string[] keyFieldNames = null)
    parameters:
    - id: sql
      type: System.String
    - id: listener
      type: Func{Butterfly.Core.Database.Event.DataEventTransaction,Task}
    - id: values
      type: System.Object
    - id: name
      type: System.String
    - id: keyFieldNames
      type: System.String[]
    return:
      type: Task{Butterfly.Core.Database.Dynamic.DynamicViewSet}
    content.vb: Function CreateAndStartDynamicViewAsync(sql As String, listener As Func(Of DataEventTransaction, Task), values As Object = Nothing, name As String = Nothing, keyFieldNames As String() = Nothing) As Task(Of DynamicViewSet)
  overload: Butterfly.Core.Database.IDatabase.CreateAndStartDynamicViewAsync*
  nameWithType.vb: IDatabase.CreateAndStartDynamicViewAsync(String, Func(Of DataEventTransaction, Task), Object, String, String())
  fullName.vb: Butterfly.Core.Database.IDatabase.CreateAndStartDynamicViewAsync(System.String, Func(Of Butterfly.Core.Database.Event.DataEventTransaction, Task), System.Object, System.String, System.String())
  name.vb: CreateAndStartDynamicViewAsync(String, Func(Of DataEventTransaction, Task), Object, String, String())
- uid: Butterfly.Core.Database.IDatabase.GetInitialDataEventsAsync(System.String,System.String[],Butterfly.Core.Database.SelectStatement,System.Object)
  commentId: M:Butterfly.Core.Database.IDatabase.GetInitialDataEventsAsync(System.String,System.String[],Butterfly.Core.Database.SelectStatement,System.Object)
  id: GetInitialDataEventsAsync(System.String,System.String[],Butterfly.Core.Database.SelectStatement,System.Object)
  parent: Butterfly.Core.Database.IDatabase
  langs:
  - csharp
  - vb
  name: GetInitialDataEventsAsync(String, String[], SelectStatement, Object)
  nameWithType: IDatabase.GetInitialDataEventsAsync(String, String[], SelectStatement, Object)
  fullName: Butterfly.Core.Database.IDatabase.GetInitialDataEventsAsync(System.String, System.String[], Butterfly.Core.Database.SelectStatement, System.Object)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Database/IDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: GetInitialDataEventsAsync
    path: ../Butterfly.Core/Database/IDatabase.cs
    startLine: 367
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Database
  summary: "\nExecutes the <code data-dev-comment-type=\"paramref\" class=\"paramref\">selectStatement</code> and returns the results as an array of <xref href=\"Butterfly.Core.Database.Event.DataEvent\" data-throw-if-not-resolved=\"false\"></xref> instances\n"
  example: []
  syntax:
    content: Task<DataEvent[]> GetInitialDataEventsAsync(string dataEventName, string[] keyFieldNames, SelectStatement selectStatement, dynamic statementParams = null)
    parameters:
    - id: dataEventName
      type: System.String
      description: ''
    - id: keyFieldNames
      type: System.String[]
      description: ''
    - id: selectStatement
      type: Butterfly.Core.Database.SelectStatement
      description: ''
    - id: statementParams
      type: System.Object
      description: ''
    return:
      type: Task{Butterfly.Core.Database.Event.DataEvent[]}
      description: ''
    content.vb: Function GetInitialDataEventsAsync(dataEventName As String, keyFieldNames As String(), selectStatement As SelectStatement, statementParams As Object = Nothing) As Task(Of DataEvent())
  overload: Butterfly.Core.Database.IDatabase.GetInitialDataEventsAsync*
  nameWithType.vb: IDatabase.GetInitialDataEventsAsync(String, String(), SelectStatement, Object)
  fullName.vb: Butterfly.Core.Database.IDatabase.GetInitialDataEventsAsync(System.String, System.String(), Butterfly.Core.Database.SelectStatement, System.Object)
  name.vb: GetInitialDataEventsAsync(String, String(), SelectStatement, Object)
references:
- uid: Butterfly.Core.Database
  commentId: N:Butterfly.Core.Database
  name: Butterfly.Core.Database
  nameWithType: Butterfly.Core.Database
  fullName: Butterfly.Core.Database
- uid: Butterfly.Core.Database.IDatabase.CanJoin*
  commentId: Overload:Butterfly.Core.Database.IDatabase.CanJoin
  name: CanJoin
  nameWithType: IDatabase.CanJoin
  fullName: Butterfly.Core.Database.IDatabase.CanJoin
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Butterfly.Core.Database.IDatabase.CanFieldAlias*
  commentId: Overload:Butterfly.Core.Database.IDatabase.CanFieldAlias
  name: CanFieldAlias
  nameWithType: IDatabase.CanFieldAlias
  fullName: Butterfly.Core.Database.IDatabase.CanFieldAlias
- uid: Butterfly.Core.Database.IDatabase.SelectCount*
  commentId: Overload:Butterfly.Core.Database.IDatabase.SelectCount
  name: SelectCount
  nameWithType: IDatabase.SelectCount
  fullName: Butterfly.Core.Database.IDatabase.SelectCount
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Butterfly.Core.Database.Table
  commentId: T:Butterfly.Core.Database.Table
  parent: Butterfly.Core.Database
  name: Table
  nameWithType: Table
  fullName: Butterfly.Core.Database.Table
- uid: Butterfly.Core.Database.IDatabase.TableByName*
  commentId: Overload:Butterfly.Core.Database.IDatabase.TableByName
  name: TableByName
  nameWithType: IDatabase.TableByName
  fullName: Butterfly.Core.Database.IDatabase.TableByName
- uid: Dictionary{System.String,Butterfly.Core.Database.Table}
  commentId: '!:Dictionary{System.String,Butterfly.Core.Database.Table}'
  definition: Dictionary`2
  name: Dictionary<String, Table>
  nameWithType: Dictionary<String, Table>
  fullName: Dictionary<System.String, Butterfly.Core.Database.Table>
  nameWithType.vb: Dictionary(Of String, Table)
  fullName.vb: Dictionary(Of System.String, Butterfly.Core.Database.Table)
  name.vb: Dictionary(Of String, Table)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Butterfly.Core.Database.Table
    name: Table
    nameWithType: Table
    fullName: Butterfly.Core.Database.Table
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Butterfly.Core.Database.Table
    name: Table
    nameWithType: Table
    fullName: Butterfly.Core.Database.Table
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Database.IDatabase.CreateFromSqlAsync(System.String)
  commentId: M:Butterfly.Core.Database.IDatabase.CreateFromSqlAsync(System.String)
  parent: Butterfly.Core.Database.IDatabase
  isExternal: true
  name: CreateFromSqlAsync(String)
  nameWithType: IDatabase.CreateFromSqlAsync(String)
  fullName: Butterfly.Core.Database.IDatabase.CreateFromSqlAsync(System.String)
  spec.csharp:
  - uid: Butterfly.Core.Database.IDatabase.CreateFromSqlAsync(System.String)
    name: CreateFromSqlAsync
    nameWithType: IDatabase.CreateFromSqlAsync
    fullName: Butterfly.Core.Database.IDatabase.CreateFromSqlAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Core.Database.IDatabase.CreateFromSqlAsync(System.String)
    name: CreateFromSqlAsync
    nameWithType: IDatabase.CreateFromSqlAsync
    fullName: Butterfly.Core.Database.IDatabase.CreateFromSqlAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Database.IDatabase.CreateFromResourceFileAsync*
  commentId: Overload:Butterfly.Core.Database.IDatabase.CreateFromResourceFileAsync
  name: CreateFromResourceFileAsync
  nameWithType: IDatabase.CreateFromResourceFileAsync
  fullName: Butterfly.Core.Database.IDatabase.CreateFromResourceFileAsync
- uid: Assembly
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: Assembly
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Butterfly.Core.Database.IDatabase
  commentId: T:Butterfly.Core.Database.IDatabase
  parent: Butterfly.Core.Database
  name: IDatabase
  nameWithType: IDatabase
  fullName: Butterfly.Core.Database.IDatabase
- uid: Butterfly.Core.Database.IDatabase.CreateFromSqlAsync*
  commentId: Overload:Butterfly.Core.Database.IDatabase.CreateFromSqlAsync
  name: CreateFromSqlAsync
  nameWithType: IDatabase.CreateFromSqlAsync
  fullName: Butterfly.Core.Database.IDatabase.CreateFromSqlAsync
- uid: Butterfly.Core.Database.Event.DataEventTransaction
  commentId: T:Butterfly.Core.Database.Event.DataEventTransaction
  parent: Butterfly.Core.Database.Event
  name: DataEventTransaction
  nameWithType: DataEventTransaction
  fullName: Butterfly.Core.Database.Event.DataEventTransaction
- uid: Butterfly.Core.Database.IDatabase.OnNewUncommittedTransaction*
  commentId: Overload:Butterfly.Core.Database.IDatabase.OnNewUncommittedTransaction
  name: OnNewUncommittedTransaction
  nameWithType: IDatabase.OnNewUncommittedTransaction
  fullName: Butterfly.Core.Database.IDatabase.OnNewUncommittedTransaction
- uid: Action{Butterfly.Core.Database.Event.DataEventTransaction}
  commentId: '!:Action{Butterfly.Core.Database.Event.DataEventTransaction}'
  definition: Action`1
  name: Action<DataEventTransaction>
  nameWithType: Action<DataEventTransaction>
  fullName: Action<Butterfly.Core.Database.Event.DataEventTransaction>
  nameWithType.vb: Action(Of DataEventTransaction)
  fullName.vb: Action(Of Butterfly.Core.Database.Event.DataEventTransaction)
  name.vb: Action(Of DataEventTransaction)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Core.Database.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Core.Database.Event.DataEventTransaction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Core.Database.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Core.Database.Event.DataEventTransaction
  - name: )
    nameWithType: )
    fullName: )
- uid: IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: IDisposable
- uid: Butterfly.Core.Database.Event
  commentId: N:Butterfly.Core.Database.Event
  name: Butterfly.Core.Database.Event
  nameWithType: Butterfly.Core.Database.Event
  fullName: Butterfly.Core.Database.Event
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{Butterfly.Core.Database.Event.DataEventTransaction,Task}
  commentId: '!:Func{Butterfly.Core.Database.Event.DataEventTransaction,Task}'
  definition: Func`2
  name: Func<DataEventTransaction, Task>
  nameWithType: Func<DataEventTransaction, Task>
  fullName: Func<Butterfly.Core.Database.Event.DataEventTransaction, Task>
  nameWithType.vb: Func(Of DataEventTransaction, Task)
  fullName.vb: Func(Of Butterfly.Core.Database.Event.DataEventTransaction, Task)
  name.vb: Func(Of DataEventTransaction, Task)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Core.Database.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Core.Database.Event.DataEventTransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Core.Database.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Core.Database.Event.DataEventTransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Database.IDatabase.OnNewCommittedTransaction*
  commentId: Overload:Butterfly.Core.Database.IDatabase.OnNewCommittedTransaction
  name: OnNewCommittedTransaction
  nameWithType: IDatabase.OnNewCommittedTransaction
  fullName: Butterfly.Core.Database.IDatabase.OnNewCommittedTransaction
- uid: Butterfly.Core.Database.IDatabase.SelectValueAsync*
  commentId: Overload:Butterfly.Core.Database.IDatabase.SelectValueAsync
  name: SelectValueAsync
  nameWithType: IDatabase.SelectValueAsync
  fullName: Butterfly.Core.Database.IDatabase.SelectValueAsync
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Task{{T}}
  commentId: '!:Task{``0}'
  definition: Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Database.IDatabase.SelectValuesAsync*
  commentId: Overload:Butterfly.Core.Database.IDatabase.SelectValuesAsync
  name: SelectValuesAsync
  nameWithType: IDatabase.SelectValuesAsync
  fullName: Butterfly.Core.Database.IDatabase.SelectValuesAsync
- uid: Task{{T}[]}
  commentId: '!:Task{``0[]}'
  definition: Task`1
  name: Task<T[]>
  nameWithType: Task<T[]>
  fullName: Task<T[]>
  nameWithType.vb: Task(Of T())
  fullName.vb: Task(Of T())
  name.vb: Task(Of T())
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Database.IDatabase.SelectRowAsync*
  commentId: Overload:Butterfly.Core.Database.IDatabase.SelectRowAsync
  name: SelectRowAsync
  nameWithType: IDatabase.SelectRowAsync
  fullName: Butterfly.Core.Database.IDatabase.SelectRowAsync
- uid: Task{System.Collections.Generic.Dictionary{System.String,System.Object}}
  commentId: '!:Task{System.Collections.Generic.Dictionary{System.String,System.Object}}'
  definition: Task`1
  name: Task<System.Collections.Generic.Dictionary<String, Object>>
  nameWithType: Task<System.Collections.Generic.Dictionary<String, Object>>
  fullName: Task<System.Collections.Generic.Dictionary<System.String, System.Object>>
  nameWithType.vb: Task(Of System.Collections.Generic.Dictionary(Of String, Object))
  fullName.vb: Task(Of System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Task(Of System.Collections.Generic.Dictionary(Of String, Object))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Database.IDatabase.SelectRowsAsync*
  commentId: Overload:Butterfly.Core.Database.IDatabase.SelectRowsAsync
  name: SelectRowsAsync
  nameWithType: IDatabase.SelectRowsAsync
  fullName: Butterfly.Core.Database.IDatabase.SelectRowsAsync
- uid: Task{System.Collections.Generic.Dictionary{System.String,System.Object}[]}
  commentId: '!:Task{System.Collections.Generic.Dictionary{System.String,System.Object}[]}'
  definition: Task`1
  name: Task<System.Collections.Generic.Dictionary<String, Object>[]>
  nameWithType: Task<System.Collections.Generic.Dictionary<String, Object>[]>
  fullName: Task<System.Collections.Generic.Dictionary<System.String, System.Object>[]>
  nameWithType.vb: Task(Of System.Collections.Generic.Dictionary(Of String, Object)())
  fullName.vb: Task(Of System.Collections.Generic.Dictionary(Of System.String, System.Object)())
  name.vb: Task(Of System.Collections.Generic.Dictionary(Of String, Object)())
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Database.SelectStatement
  commentId: T:Butterfly.Core.Database.SelectStatement
  parent: Butterfly.Core.Database
  name: SelectStatement
  nameWithType: SelectStatement
  fullName: Butterfly.Core.Database.SelectStatement
- uid: Butterfly.Core.Database.IDatabase.QueryValueAsync*
  commentId: Overload:Butterfly.Core.Database.IDatabase.QueryValueAsync
  name: QueryValueAsync
  nameWithType: IDatabase.QueryValueAsync
  fullName: Butterfly.Core.Database.IDatabase.QueryValueAsync
- uid: Butterfly.Core.Database.IDatabase.QueryRowAsync*
  commentId: Overload:Butterfly.Core.Database.IDatabase.QueryRowAsync
  name: QueryRowAsync
  nameWithType: IDatabase.QueryRowAsync
  fullName: Butterfly.Core.Database.IDatabase.QueryRowAsync
- uid: Butterfly.Core.Database.IDatabase.QueryRowsAsync*
  commentId: Overload:Butterfly.Core.Database.IDatabase.QueryRowsAsync
  name: QueryRowsAsync
  nameWithType: IDatabase.QueryRowsAsync
  fullName: Butterfly.Core.Database.IDatabase.QueryRowsAsync
- uid: Butterfly.Core.Database.DuplicateKeyDatabaseException
  commentId: T:Butterfly.Core.Database.DuplicateKeyDatabaseException
  name: DuplicateKeyDatabaseException
  nameWithType: DuplicateKeyDatabaseException
  fullName: Butterfly.Core.Database.DuplicateKeyDatabaseException
- uid: Butterfly.Core.Database.IDatabase.InsertAndCommitAsync*
  commentId: Overload:Butterfly.Core.Database.IDatabase.InsertAndCommitAsync
  name: InsertAndCommitAsync
  nameWithType: IDatabase.InsertAndCommitAsync
  fullName: Butterfly.Core.Database.IDatabase.InsertAndCommitAsync
- uid: Butterfly.Core.Database.IDatabase.UpdateAndCommitAsync*
  commentId: Overload:Butterfly.Core.Database.IDatabase.UpdateAndCommitAsync
  name: UpdateAndCommitAsync
  nameWithType: IDatabase.UpdateAndCommitAsync
  fullName: Butterfly.Core.Database.IDatabase.UpdateAndCommitAsync
- uid: Task{System.Int32}
  commentId: '!:Task{System.Int32}'
  definition: Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Database.IDatabase.DeleteAndCommitAsync*
  commentId: Overload:Butterfly.Core.Database.IDatabase.DeleteAndCommitAsync
  name: DeleteAndCommitAsync
  nameWithType: IDatabase.DeleteAndCommitAsync
  fullName: Butterfly.Core.Database.IDatabase.DeleteAndCommitAsync
- uid: Butterfly.Core.Database.ITransaction
  commentId: T:Butterfly.Core.Database.ITransaction
  parent: Butterfly.Core.Database
  name: ITransaction
  nameWithType: ITransaction
  fullName: Butterfly.Core.Database.ITransaction
- uid: Butterfly.Core.Database.ITransaction.CommitAsync
  commentId: M:Butterfly.Core.Database.ITransaction.CommitAsync
  parent: Butterfly.Core.Database.ITransaction
  name: CommitAsync()
  nameWithType: ITransaction.CommitAsync()
  fullName: Butterfly.Core.Database.ITransaction.CommitAsync()
  spec.csharp:
  - uid: Butterfly.Core.Database.ITransaction.CommitAsync
    name: CommitAsync
    nameWithType: ITransaction.CommitAsync
    fullName: Butterfly.Core.Database.ITransaction.CommitAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Core.Database.ITransaction.CommitAsync
    name: CommitAsync
    nameWithType: ITransaction.CommitAsync
    fullName: Butterfly.Core.Database.ITransaction.CommitAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Database.IDatabase.BeginTransaction*
  commentId: Overload:Butterfly.Core.Database.IDatabase.BeginTransaction
  name: BeginTransaction
  nameWithType: IDatabase.BeginTransaction
  fullName: Butterfly.Core.Database.IDatabase.BeginTransaction
- uid: Butterfly.Core.Database.IDatabase.BeginTransactionAsync*
  commentId: Overload:Butterfly.Core.Database.IDatabase.BeginTransactionAsync
  name: BeginTransactionAsync
  nameWithType: IDatabase.BeginTransactionAsync
  fullName: Butterfly.Core.Database.IDatabase.BeginTransactionAsync
- uid: Task{Butterfly.Core.Database.ITransaction}
  commentId: '!:Task{Butterfly.Core.Database.ITransaction}'
  definition: Task`1
  name: Task<ITransaction>
  nameWithType: Task<ITransaction>
  fullName: Task<Butterfly.Core.Database.ITransaction>
  nameWithType.vb: Task(Of ITransaction)
  fullName.vb: Task(Of Butterfly.Core.Database.ITransaction)
  name.vb: Task(Of ITransaction)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Core.Database.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Butterfly.Core.Database.ITransaction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Core.Database.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Butterfly.Core.Database.ITransaction
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Database.IDatabase.SetDefaultValue*
  commentId: Overload:Butterfly.Core.Database.IDatabase.SetDefaultValue
  name: SetDefaultValue
  nameWithType: IDatabase.SetDefaultValue
  fullName: Butterfly.Core.Database.IDatabase.SetDefaultValue
- uid: Func{System.String,System.Object}
  commentId: '!:Func{System.String,System.Object}'
  definition: Func`2
  name: Func<String, Object>
  nameWithType: Func<String, Object>
  fullName: Func<System.String, System.Object>
  nameWithType.vb: Func(Of String, Object)
  fullName.vb: Func(Of System.String, System.Object)
  name.vb: Func(Of String, Object)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Database.IDatabase.SetOverrideValue*
  commentId: Overload:Butterfly.Core.Database.IDatabase.SetOverrideValue
  name: SetOverrideValue
  nameWithType: IDatabase.SetOverrideValue
  fullName: Butterfly.Core.Database.IDatabase.SetOverrideValue
- uid: Butterfly.Core.Database.IDatabase.AddInputPreprocessor*
  commentId: Overload:Butterfly.Core.Database.IDatabase.AddInputPreprocessor
  name: AddInputPreprocessor
  nameWithType: IDatabase.AddInputPreprocessor
  fullName: Butterfly.Core.Database.IDatabase.AddInputPreprocessor
- uid: Action{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}}
  commentId: '!:Action{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}}'
  definition: Action`2
  name: Action<String, System.Collections.Generic.Dictionary<String, Object>>
  nameWithType: Action<String, System.Collections.Generic.Dictionary<String, Object>>
  fullName: Action<System.String, System.Collections.Generic.Dictionary<System.String, System.Object>>
  nameWithType.vb: Action(Of String, System.Collections.Generic.Dictionary(Of String, Object))
  fullName.vb: Action(Of System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Action(Of String, System.Collections.Generic.Dictionary(Of String, Object))
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`2
  isExternal: true
  name: Action<, >
  nameWithType: Action<, >
  fullName: Action<, >
  nameWithType.vb: Action(Of , )
  fullName.vb: Action(Of , )
  name.vb: Action(Of , )
  spec.csharp:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Database.Dynamic.DynamicView
  commentId: T:Butterfly.Core.Database.Dynamic.DynamicView
  parent: Butterfly.Core.Database.Dynamic
  name: DynamicView
  nameWithType: DynamicView
  fullName: Butterfly.Core.Database.Dynamic.DynamicView
- uid: Butterfly.Core.Database.Dynamic.DynamicViewSet
  commentId: T:Butterfly.Core.Database.Dynamic.DynamicViewSet
  parent: Butterfly.Core.Database.Dynamic
  name: DynamicViewSet
  nameWithType: DynamicViewSet
  fullName: Butterfly.Core.Database.Dynamic.DynamicViewSet
- uid: Butterfly.Core.Database.IDatabase.CreateDynamicViewSet*
  commentId: Overload:Butterfly.Core.Database.IDatabase.CreateDynamicViewSet
  name: CreateDynamicViewSet
  nameWithType: IDatabase.CreateDynamicViewSet
  fullName: Butterfly.Core.Database.IDatabase.CreateDynamicViewSet
- uid: Butterfly.Core.Database.Dynamic
  commentId: N:Butterfly.Core.Database.Dynamic
  name: Butterfly.Core.Database.Dynamic
  nameWithType: Butterfly.Core.Database.Dynamic
  fullName: Butterfly.Core.Database.Dynamic
- uid: Butterfly.Core.Database.IDatabase.CreateAndStartDynamicViewAsync*
  commentId: Overload:Butterfly.Core.Database.IDatabase.CreateAndStartDynamicViewAsync
  name: CreateAndStartDynamicViewAsync
  nameWithType: IDatabase.CreateAndStartDynamicViewAsync
  fullName: Butterfly.Core.Database.IDatabase.CreateAndStartDynamicViewAsync
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Task{Butterfly.Core.Database.Dynamic.DynamicViewSet}
  commentId: '!:Task{Butterfly.Core.Database.Dynamic.DynamicViewSet}'
  definition: Task`1
  name: Task<DynamicViewSet>
  nameWithType: Task<DynamicViewSet>
  fullName: Task<Butterfly.Core.Database.Dynamic.DynamicViewSet>
  nameWithType.vb: Task(Of DynamicViewSet)
  fullName.vb: Task(Of Butterfly.Core.Database.Dynamic.DynamicViewSet)
  name.vb: Task(Of DynamicViewSet)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Core.Database.Dynamic.DynamicViewSet
    name: DynamicViewSet
    nameWithType: DynamicViewSet
    fullName: Butterfly.Core.Database.Dynamic.DynamicViewSet
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Core.Database.Dynamic.DynamicViewSet
    name: DynamicViewSet
    nameWithType: DynamicViewSet
    fullName: Butterfly.Core.Database.Dynamic.DynamicViewSet
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Database.Event.DataEvent
  commentId: T:Butterfly.Core.Database.Event.DataEvent
  parent: Butterfly.Core.Database.Event
  name: DataEvent
  nameWithType: DataEvent
  fullName: Butterfly.Core.Database.Event.DataEvent
- uid: Butterfly.Core.Database.IDatabase.GetInitialDataEventsAsync*
  commentId: Overload:Butterfly.Core.Database.IDatabase.GetInitialDataEventsAsync
  name: GetInitialDataEventsAsync
  nameWithType: IDatabase.GetInitialDataEventsAsync
  fullName: Butterfly.Core.Database.IDatabase.GetInitialDataEventsAsync
- uid: Task{Butterfly.Core.Database.Event.DataEvent[]}
  commentId: '!:Task{Butterfly.Core.Database.Event.DataEvent[]}'
  definition: Task`1
  name: Task<DataEvent[]>
  nameWithType: Task<DataEvent[]>
  fullName: Task<Butterfly.Core.Database.Event.DataEvent[]>
  nameWithType.vb: Task(Of DataEvent())
  fullName.vb: Task(Of Butterfly.Core.Database.Event.DataEvent())
  name.vb: Task(Of DataEvent())
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Core.Database.Event.DataEvent
    name: DataEvent
    nameWithType: DataEvent
    fullName: Butterfly.Core.Database.Event.DataEvent
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Core.Database.Event.DataEvent
    name: DataEvent
    nameWithType: DataEvent
    fullName: Butterfly.Core.Database.Event.DataEvent
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true

### YamlMime:ManagedReference
items:
- uid: Butterfly.Core.Util.DynamicX
  commentId: T:Butterfly.Core.Util.DynamicX
  id: DynamicX
  parent: Butterfly.Core.Util
  children:
  - Butterfly.Core.Util.DynamicX.GetKeys(System.Object)
  - Butterfly.Core.Util.DynamicX.GetProperties(System.Object)
  - Butterfly.Core.Util.DynamicX.ToDictionary(System.Object)
  langs:
  - csharp
  - vb
  name: DynamicX
  nameWithType: DynamicX
  fullName: Butterfly.Core.Util.DynamicX
  type: Class
  source:
    remote:
      path: Butterfly.Core/Util/DynamicX.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: DynamicX
    path: ../Butterfly.Core/Util/DynamicX.cs
    startLine: 10
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Util
  syntax:
    content: 'public static class DynamicX : object'
    content.vb: >-
      Public Module DynamicX
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Butterfly.Core.Util.DynamicX.GetProperties(System.Object)
  commentId: M:Butterfly.Core.Util.DynamicX.GetProperties(System.Object)
  id: GetProperties(System.Object)
  parent: Butterfly.Core.Util.DynamicX
  langs:
  - csharp
  - vb
  name: GetProperties(Object)
  nameWithType: DynamicX.GetProperties(Object)
  fullName: Butterfly.Core.Util.DynamicX.GetProperties(System.Object)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Util/DynamicX.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: GetProperties
    path: ../Butterfly.Core/Util/DynamicX.cs
    startLine: 11
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Util
  syntax:
    content: public static ICollection<PropertyInfo> GetProperties(dynamic values)
    parameters:
    - id: values
      type: System.Object
    return:
      type: ICollection{PropertyInfo}
    content.vb: Public Shared Function GetProperties(values As Object) As ICollection(Of PropertyInfo)
  overload: Butterfly.Core.Util.DynamicX.GetProperties*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Butterfly.Core.Util.DynamicX.GetKeys(System.Object)
  commentId: M:Butterfly.Core.Util.DynamicX.GetKeys(System.Object)
  id: GetKeys(System.Object)
  parent: Butterfly.Core.Util.DynamicX
  langs:
  - csharp
  - vb
  name: GetKeys(Object)
  nameWithType: DynamicX.GetKeys(Object)
  fullName: Butterfly.Core.Util.DynamicX.GetKeys(System.Object)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Util/DynamicX.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: GetKeys
    path: ../Butterfly.Core/Util/DynamicX.cs
    startLine: 16
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Util
  syntax:
    content: public static ICollection<string> GetKeys(dynamic values)
    parameters:
    - id: values
      type: System.Object
    return:
      type: ICollection{System.String}
    content.vb: Public Shared Function GetKeys(values As Object) As ICollection(Of String)
  overload: Butterfly.Core.Util.DynamicX.GetKeys*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Butterfly.Core.Util.DynamicX.ToDictionary(System.Object)
  commentId: M:Butterfly.Core.Util.DynamicX.ToDictionary(System.Object)
  id: ToDictionary(System.Object)
  parent: Butterfly.Core.Util.DynamicX
  langs:
  - csharp
  - vb
  name: ToDictionary(Object)
  nameWithType: DynamicX.ToDictionary(Object)
  fullName: Butterfly.Core.Util.DynamicX.ToDictionary(System.Object)
  type: Method
  source:
    remote:
      path: Butterfly.Core/Util/DynamicX.cs
      branch: master
      repo: https://github.com/firesharkstudios/Butterfly.git
    id: ToDictionary
    path: ../Butterfly.Core/Util/DynamicX.cs
    startLine: 21
  assemblies:
  - Butterfly.Core
  namespace: Butterfly.Core.Util
  syntax:
    content: public static Dictionary<string, object> ToDictionary(object values)
    parameters:
    - id: values
      type: System.Object
    return:
      type: Dictionary{System.String,System.Object}
    content.vb: Public Shared Function ToDictionary(values As Object) As Dictionary(Of String, Object)
  overload: Butterfly.Core.Util.DynamicX.ToDictionary*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Butterfly.Core.Util
  commentId: N:Butterfly.Core.Util
  name: Butterfly.Core.Util
  nameWithType: Butterfly.Core.Util
  fullName: Butterfly.Core.Util
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Butterfly.Core.Util.DynamicX.GetProperties*
  commentId: Overload:Butterfly.Core.Util.DynamicX.GetProperties
  name: GetProperties
  nameWithType: DynamicX.GetProperties
  fullName: Butterfly.Core.Util.DynamicX.GetProperties
- uid: ICollection{PropertyInfo}
  commentId: '!:ICollection{PropertyInfo}'
  definition: ICollection`1
  name: ICollection<PropertyInfo>
  nameWithType: ICollection<PropertyInfo>
  fullName: ICollection<PropertyInfo>
  nameWithType.vb: ICollection(Of PropertyInfo)
  fullName.vb: ICollection(Of PropertyInfo)
  name.vb: ICollection(Of PropertyInfo)
  spec.csharp:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ICollection`1
  isExternal: true
  name: ICollection<>
  nameWithType: ICollection<>
  fullName: ICollection<>
  nameWithType.vb: ICollection(Of )
  fullName.vb: ICollection(Of )
  name.vb: ICollection(Of )
  spec.csharp:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Util.DynamicX.GetKeys*
  commentId: Overload:Butterfly.Core.Util.DynamicX.GetKeys
  name: GetKeys
  nameWithType: DynamicX.GetKeys
  fullName: Butterfly.Core.Util.DynamicX.GetKeys
- uid: ICollection{System.String}
  commentId: '!:ICollection{System.String}'
  definition: ICollection`1
  name: ICollection<String>
  nameWithType: ICollection<String>
  fullName: ICollection<System.String>
  nameWithType.vb: ICollection(Of String)
  fullName.vb: ICollection(Of System.String)
  name.vb: ICollection(Of String)
  spec.csharp:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Core.Util.DynamicX.ToDictionary*
  commentId: Overload:Butterfly.Core.Util.DynamicX.ToDictionary
  name: ToDictionary
  nameWithType: DynamicX.ToDictionary
  fullName: Butterfly.Core.Util.DynamicX.ToDictionary
- uid: Dictionary{System.String,System.Object}
  commentId: '!:Dictionary{System.String,System.Object}'
  definition: Dictionary`2
  name: Dictionary<String, Object>
  nameWithType: Dictionary<String, Object>
  fullName: Dictionary<System.String, System.Object>
  nameWithType.vb: Dictionary(Of String, Object)
  fullName.vb: Dictionary(Of System.String, System.Object)
  name.vb: Dictionary(Of String, Object)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
